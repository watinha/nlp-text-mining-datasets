,title-abstract,title,label
0,"The Case for Collaborative Programming
Team programming usually means coordinating efforts of individual
programmers who divide up the programming tasks for a large, complex
system. Collaborative programming is used here to mean 2 programmers
jointly working on the same algorithm and code. Previous research
indicates that student programmers working collaboratively outperformed
individual programmers. A follow-up field experiment was conducted
using experienced programmers who worked on a challenging problem
important to their organization, in their own environment. To the
surprise of the managers and participants, all the teams outperformed
the individual programmers, enjoyed the problem-solving process more,
and had greater confidence in their solutions.",The Case for Collaborative Programming,0
1,"But, isn't that cheating? [collaborative programming]
Can university computer science students benefit from collaborative
programming? The author discusses his experiences with a class he
taught at the University of Utah which set out to study pair programming
in an educational setting. The class, an Active Server Pages (ASP)
web programming class, consisted of 20 juniors and seniors. The students
were very familiar with programming, but not with the web programming
languages learned and used in the class. Each student was paired
with another student to work with for the entire semester. Tests
were, however, taken individually. They understood that the idea
was not to break the class project into two pieces and integrate
later. The idea was to work together (almost) all the time on one
product. These requirements were stated in the course announcement
and were re-stated at the start of the class. Most skeptically, but
enthusiastically, embarked on making the transition from solo to
collaborative programming. The consensus of the class was very, very
positive about the technique. Making the transition to pair programming
involves breaking down some personal barriers beginning with the
understanding that talking is not cheating. Pair programming has
the potential of changing how programming classes are taught in order
to benefit the students' learning experience.","But, isn't that cheating? [collaborative programming]",0
2,"Pair Programming: Development times two
By teaming developers into two-person groups, you can boost both software
quality and staff satisfaction.",Pair Programming: Development times two,0
3,"The costs and benefits of pair programming
Pair or collaborative programming is where two programmers develop
software side by side at one computer. Using interviews and controlled
experiments, the authors investigated the costs and benefits of pair
programming. They found that for a development-time cost of about
15%, pair programming improves design quality, reduces defects, reduces
staffing risk, enhances technical skills, improves team communications
and is considered more enjoyable at statistically significant levels.",The costs and benefits of pair programming,0
4,"Extreme programming and its development practices
Extreme programming (XP) has attracted attention because of its fierce
denial of many well-accepted software engineering practices considered
as a sound approach to the development of intensive software systems.
XP has been declared to be a new way of software development: a lightweight
methodology, which is efficient, low-risk, flexible, predictable,
scientific, and distinguishable from any other methodology. In the
core of XP practices are programming activities, with strong emphasis
on oral communications, automated tests, pair programming, storytelling
culture and collective code-ownership at any time in the XP project.
The paper gives an overview of XP practices and raises some serious
concerns regarding their role in conceptual modelling and code generation;
which directly affects software architecture solutions. The paper
also tackles similarities between rational unified process (RUP)
and XP, which have often been juxtaposed by software developers.",Extreme programming and its development practices,0
5,"Extreme programming: a university team design experience
The paper discusses an experience in applying the extreme programming
approach to the 4 year team design project course. Extreme programming
is a methodology for software system development that focuses on
high customer integration, extensive testing, code-centered development
and documentation, refactoring and paired programming. Typically,
the project course is managed using the standard waterfall or V-shaped
development models with a faculty advisor acting as a customer for
the project. In this project extreme programming has been used instead.
Extreme programming is based on a sequence of development practices,
including pair programming, very accurate configuration management,
strong customer interaction based on ""system stories"", detailed testing.
In this project, paired programmers are used for the duration of
a release and then the pairs rotate. The distributed programming
environment is handled using the JCVS suite of configuration management
tools. Every 3-4 weeks, a new fully functional release is delivered
and reviewed by the customer. The specifications for each release
are captured incrementally using use case scenarios. Only the essential
requirements for the current iteration are implemented. The JUnit
test suite is also used to test each of the Java classes on an ongoing
basis. The test suite verifies all aspects of the software at each
build; this is necessary when refactoring components. Requirements
capture, design and implementation of the deliverables are performed
incrementally and result in quicker development times and reduced
defects. Refactoring is applied wherever possible to simplify the
code. Documentation is applied using the standard JavaDoc utility
and is kept to a minimum. Finally, customer feedback is immediately
incorporated into future iterations of the design process.",Extreme programming: a university team design experience,0
6,"All I really need to know about pair programming I learned in kindergarten
Pair programming is a practice in which two programmers work side-by-side
at one computer, continuously collaborating on the same design, algorithm,
code or test. This method has been demonstrated to improve productivity
and the quality of software products. When it comes to programming
practices, studies show two heads are almost always better than one.
Programmers are universally more confident in their solutions when
programming in pairs as opposed to working alone. Likewise, most
of them enjoy their jobs more when pair programming. However, most
programmers are long conditioned to working alone and often resist
the transition to pair programming. Ultimately, most make this transition
with great success. The goal of this article is to help programmers
become effective pair programmers. The transition to and on-going
success as a pair programmer often involves practicing everyday civility.
In this article we explore the inherent lessons related to successful
pair programming.",All I really need to know about pair programming I learned in kindergarten,0
7,"The effects of ""pair-pressure"" and ""pair-learning"" on software engineering
education
Anecdotal evidence from several sources, primarily in industry, indicates
that two programmers working collaboratively on the same design,
algorithm, code, or test perform substantially better than the two
would working alone. In this technique, often called ""pair programming""
or ""collaborative programming"", one person is the ""driver"" and has
control of the pencil/mouse/keyboard and is writing the design or
code. The other person continuously and actively observes the work
of the driver-watching for defects, thinking of alternatives, looking
up resources, and considering strategic implications of the work
at hand. A course in Web programming was taught at the University
of Utah in Summer Semester 1999. In this course, the students worked
in pairs, continuously collaborating on all programming assignments.
Using the technique, the students applied a positive form of ""pair-pressure""
on each other, which proved beneficial to the quality of their work
products. The students also benefited from ""pair-learning"", which
allowed them to learn new languages faster and better than they had
experienced with solitary learning. ""Pair-learning"" also reduced
the workload of the teaching because the students no longer relied
primarily on them for technical support and advise.","The effects of ""pair-pressure"" and ""pair-learning"" on software engineering
education",1
8,"Strengthening the case for pair programming
Pair programming has been practiced in industry with great success
for years. Yet, most who have nut tried and tested pair programming
reject the idea immediately as a redundant, wasteful use of programming
resources. This article demonstrates that incorporating pair programming
into a software development process will help yield software products
of better quality in less time with happier, more confident programmers.",Strengthening the case for pair programming,1
9,"Program comprehension risks and opportunities in extreme programming
Investigates the relationship between reverse engineering and program
comprehension on the one hand, and the software process on the other.
To understand this relationship, we select one particular existing
software process, extreme programming (XP), and study the role played
in it by program comprehension and reverse engineering. To that end,
we analyze five key XP practices in depth: pair programming, unit
testing, refactoring, evolutionary design and collaborative planning.
The contributions of this paper are: (1) the identification of promising
research areas in the field of program comprehension; (2) the identification
of new application perspectives for reverse engineering technology;
(3) a critical analysis of XP resulting in research questions that
could help resolve some of the uncertainties surrounding XP; and
(4) a discussion of the role that comprehension and reverse engineering
can play in software process design.",Program comprehension risks and opportunities in extreme programming,0
10,"Pair programming on the C3 project
Chrysler's Comprehensive Compensation (C3) project was one of the
first large-scale IT projects on which Extreme Programming (XP) precepts
were attempted. As XP was being invented, we didn't really think
of it as a theoretical or methodological breakthrough; it was simply
an opportunity to get the job done. The ""theory"" came about later
because of the practice's success. In my opinion, XP is not a theory,
but a cogent descriptive body of successful praxis. Some people consider
pair programming, an XP technique, to be difficult, unworkable, or
downright weird. After all, what does the workstation represent,
if not finally having your own computer? The idea of sharing your
machine with someone seems like a lot of bother without much reward.
How can you talk if you're trying to think? And how can you think
if you first have to explain what you're thinking about? Having participated
on the C3 project as a performance-tuning consultant beginning in
1996, I can attest to the success of pair programming. At the same
time, I can show instances where it did not work or was not emphasized
in this early XP project. In a sense, this pragmatism is the strength
of XP: Use a technique where it works, ignore it where it doesn't.
XP has never been prescribed as a panacea. XP's pair programming
helps programmers synthesize their individual expertise into an effective
combination.",Pair programming on the C3 project,0
11,"Case study: extreme programming in a university environment
Extreme programming (XP) is a new and controversial software process
for small teams. A practical training course at the University of
Karlsruhe led to the following observations about the key practices
of XP. First, it is unclear how to reap the potential benefits of
pair programming, although pair programming produces high-quality
code. Second, designing in small increments appears to be problematic
but ensures rapid feedback about the code. Third, while automated
testing is helpful, writing test cases before coding is a challenge.
Last, it is difficult to implement XP without coaching. This paper
also provides some guidelines for those starting out with XP.",Case study: extreme programming in a university environment,0
12,"Experimental Evaluation of Pair Programming
Pair programming is a kind of collaborative programming where two
people are working simultaneously on the same programming task. It
is one of the key practices of eXtreme Programming. In the paper
we

compare it with two variants of individual programming: one of them
is based on Personal Software Process that has been proposed by W.
Humphrey, and the other is a variant of eXtreme Programming tailored

to individuals. Four experiments are described that has been performed
at the Poznan University of Technology. During those experiments
21 students wrote 4 C/C++ programs ranging from 150 to

400 LOC. The obtained results are compared with the results of similar
experiments described by J.T. Nosek and L. Williams et al.",Experimental Evaluation of Pair Programming,1
13,"Extreme Programming from a CMM perspective
Extreme Programming (XP) has been advocated recently as an appropriate
programming method for the high-speed, volatile world of Internet
and Web software development. This popular methodology is

reviewed from the perspective of the Capability Maturity Model (CMM)
for Software, a five-level model that prescribes process improvement
priorities for software organizations. Overviews of both XP and CMM

are provided, and XP is critiqued from a Software CMM perspective.
The conclusion is that lightweight methodologies such as XP advocate
many good engineering practices, although some practices may be

controversial and counter-productive outside a narrow domain. For
those interested in process improvement, the ideas in XP should be
carefully considered for adoption where appropriate in an

organization's business environment since XP can be used to address
many of the CMM Level 2 and 3 practices. In turn, organizations using
XP should carefully consider the management and infrastructure issues

described in the CMM.",Extreme Programming from a CMM perspective,0
14,"Exclusion, assumptions, and misinterpretation: foes of collaboration
It all started when I was reviewing the comments on an e-question
posed by M. Heller, executive Web editor of CIO magazine: ""Would
agile software development work in your shop?"" As someone who is
very interested in the practices and, more importantly, the philosophies
of the agile approaches, I wanted to see what the consensus was.
I personally have witnessed some surprisingly emotional responses
from ClOs about the agile approaches: it would never work, it was
just RAD, prototyping was a bad idea, pair programming was too expensive,
and so on. I expected to see more of that. There are still men who
believe that women will always be less technically talented. Society
may not allow them to say it anymore, but the choices they make confirm
the belief. Most, I am sure, are not conscious of this belief. Some
of the articles written by IT professionals, including some in the
Cutter journals, sound pompous, judgmental, and egotistical, not
just toward women, but toward anyone who does not share their particular
view. Dialog is replaced with a good, tough competition, with someone's
winning requiring that others lose. It strikes me how important it
is for all of us, regardless of sex, race, or nationality (to say
nothing of methodology preference!) to set aside the petty focus
on differences that keep us from connecting. We must all work hard
to reach out to others, to respect their opinions and skills, even
when they are different from our own. We must invest time in all
relationships around us, as we have learned how truly fragile they
all are. We must be the glue to heal our world. IT has an amazing
amount of power to do just that, a power as yet untapped .","Exclusion, assumptions, and misinterpretation: foes of collaboration",0
15,"Student Perceptions of the suitability of Extreme and Pair Programming
Senior students in a software engineering class were asked to write
opinion papers regarding the use of Extreme Programming (XP) in a
software engineering class, and the use of pair programming in an
introductory programming course. The majority of the students were
opposed to using XP in the software engineering class, but favored
the use of pair programming in an introductory programming course.
Early indications from a pilot study in pair programming are consistent
with these opinions. The students’ comments are insightful, and should
be considered before introducing either of these practices into the
curriculum.",Student Perceptions of the suitability of Extreme and Pair Programming,0
16,"Quantitative assessment of extreme programming practices
Some anecdotal evidence demonstrates success of the extreme programming
practice in a portion of the software industry. It has also been
argued that pair programming, as as a part of the extreme programming
process, yields higher quality software products in less time. On
the other hand, these principles are sometimes questioned with respect
to resource allocation and management issues. Although precise information
about benefits and costs of the extreme programming practice represents
a critical guideline for improvement of software quality, there has
been little work on the subject beyond subjective reports and a study
in an academic environment. We propose an experimental framework
to quantify benefits and costs of the pair programming practice and
compare design aspects of the resulting software products and their
defect behavior. For this purpose, we use a set of object-oriented
metrics and software reliability growth models based on service requests.",Quantitative assessment of extreme programming practices,0
17,"Pair programming and testing in a medical web project
(no abstract)",Pair programming and testing in a medical web project,0
18,"Experiments with industry's ""pair-programming"" model in the computer
science classroom
Anecdotal evidence from several sources, primarily in industry, indicates
that two programmers working collaboratively on the same design,
algorithm, code, or test perform substantially better than the two
working alone. Two courses taught at the University of Utah studied
the use of this technique, often called pair-programming or collaborative
programming, in the undergraduate computer science classroom. The
students applied a positive form of ""pair-pressure"" on each other,
which proved beneficial to the quality of their work products. The
students also benefit from ""pair-learning"" which allowed them to
learn new languages faster and better than with solitary learning.
The workload of the teaching staff is reduced because the students
more often look to each other for technical support and advice.","Experiments with industry's ""pair-programming"" model in the computer
science classroom",0
19,"Integrating pair programming into a software development process
Anecdotal and statistical evidence indicates that pair programmers
- two programmers working side-by-side at one computer collaborating
on the same design, algorithm, code or test - outperform individual
programmers. One of the programmers (the driver) has control of the
keyboard/mouse and actively implements the program. The other programmer
(the observer) continuously observes the work of the driver to identify
tactical (syntactic, spelling, etc.) defects, and also thinks strategically
about the direction of the work. On demand, the two programmers can
brainstorm any challenging problem. Because the two programmers periodically
switch roles, they work together as equals to develop software. This
practice of pair programming can be integrated into any software
development process. As an example, this paper describes the changes
that were made to the Personal Software Process (PSP) to leverage
the power of two programmers working together, thereby formulating
the Collaborative Software Process (CSP). The paper also discusses
the expected results of incorporating pair programming into a software
development process in which traditional, individual programming
is currently used.",Integrating pair programming into a software development process,0
20,"Experimenting with industry's ""Pair-Programming"" model in the Computer
Science classroom
Anecdotal evidence from several sources, primarily in industry, indicates
that two programmers working collaboratively on the same design,
algorithm, code, or test perform substantially better than the two
would working alone. Two courses taught at the University of Utah
studied the use of this technique, often called pair-programming
or collaborative programming,

in the undergraduate computer science classroom. The students applied
a positive form of “pair-pressure” on each other, which proved beneficial
to the quality of their work products. The students also benefit
from “pair-learning,” which allowed them to learn new languages faster
and better than with solitary learning. The workload of the teaching
staff is reduced because the students more often look to each other
for technical support and advice.","Experimenting with industry's ""Pair-Programming"" model in the Computer
Science classroom",0
21,"Extreme programming for software engineering education?
The eXtreme Programming (XP) software development methodology, has
received considerable attention in recent years. The adherents of
XP anecdotally extol its benefits, particularly as a method that
is highly responsive to changing customer's desires. While XP has
acquired numerous vocal advocates, the interactions and dependencies
between XP practices have not been adequately studied. Good software
engineering practice requires expertise in a complex set of activities
that involve the intellectual skills of planning, designing, evaluating,
and revising. The authors explore the practices of XP in the context
of software engineering education. To do so, one must examine the
practices of XP as they influence the acquisition of software engineering
skills. The practices of XP, in combination or isolation, may provide
critical features to aid or hinder the development of increasingly
capable practitioners. This paper evaluates the practices of XP in
the context of acquiring these necessary software engineering skills.",Extreme programming for software engineering education?,0
22,"In support of student pair-programming
Industry, particularly those following the eXtreme Programming (XP)
methodology [2], has popularized the use of pair-programming. The
pair-programming model has also been found to be beneficial for student
programmers. Initial quantitative and qualitative results, which
will be discussed in this paper, demonstrate that the use of pair-programming
in the computer science classroom enhances student learning and satisfaction
and reduces the frustration common among students. Additionally,
the use of pair-programming relieves the burden on the educators
because students no longer view the teaching staff as their sole
form of technical information. We explore the nature of pair-programming,
then examine the ways such a practice may enhance teaching and learning
in computer science education.",In support of student pair-programming,0
23,"Exploring the efficacy of distributed pair programming
Pair programming is one of the twelve practices of Extreme Programming
(XP). Pair programming is usually performed by programmers that are
collocated-working in front of the same monitor. But the inevitability
of distributed development of software gives rise to important questions:
How effective is pair programming if the pairs are not physically
next to each other? What if the programmers are geographically distributed?
An experiment was conducted at North Carolina State University to
compare different working arrangements of student teams developing
object-oriented software. Teams were both collocated and in distributed
environments; some teams practiced pair programming while others
did not. In particular, we compared the software developed by virtual
teams using distributed pair programming against collocated teams
using pair programming and against virtual teams that did not employ
distributed pair programming. The results of the experiment indicate
that it is feasible to develop software using distributed pair programming,
and that the resulting software is comparable to software developed
in collocated or virtual teams (without pair programming) in productivity
and quality.",Exploring the efficacy of distributed pair programming,0
24,"Guidelines for the use of pair programming in a freshman programming
class
Undergraduate freshman programming classes are conventionally organized
such that individual students complete a set of concept-specific
and unrelated programming assignments. This structure does not prepare
students for future collaborative efforts or for the future use of
software engineering practices. The addition of pair programming
into a freshman programming class at the University of California
at Santa Cruz (UCSC) showed similar benefits to similar studies on
upper-division software classes, and is expected to show an improvement
in students' willingness and ability to participate in complex, collaborative
software engineering assignments in later classes. This paper describes
the implementation of the pair programming experiment at UCSC, discusses
some of the issues that compromised the effectiveness of certain
pairs, and provides implementation guidelines for avoiding such issues
in other classes","Guidelines for the use of pair programming in a freshman programming
class",0
25,"Process support and knowledge management for virtual teams doing
agile software development
Agile practices are arguably improving the productivity of small,
co-located software development teams. We describe an approach that
tries to overcome the constraint of co-location by introducing a
process-support environment (called MILOS) that helps software development
teams to maintain adaptive practices in a distributed setting. MILOS
supports project coordination, information routing, team communication,
pair programming and experience management.","Process support and knowledge management for virtual teams doing
agile software development",0
26,"Experiences with a Case Study on Pair Programming
Agile methods are becoming more and more popular. Most well known
among them is probably Extreme Programming (XP) [2]. One key practice
of XP is Pair Programming (PP), where two developers work simultaneously
on a programming task. However, despite their popularity, few is
known about limitations of these methods in terms of empirical knowledge.
Some empirical studies exist on Pair Programming [5][8]. These studies
compared PP to solo programming and were conducted for small, isolated
tasks. In this paper, we describe a case study conducted in the context
of a more realistic task within a university practical course, conducted
in teams of six students and comprising about 700 person-hours of
total effort. Within our case study setting, we were able to find
weak support for the results achieved in earlier studies. More importantly,
we describe experiences we made in conducting the case study and
suggest improvements for future investigations.",Experiences with a Case Study on Pair Programming,1
27,"Paired programming \& personality traits
Paired programming is an essential element of extreme programming
--a methodology comprised of applying best practices to software
development. Not all developers are suited for paired development
however, and care should be taken when building a team for extreme
programming. The team members should be selected with personality
traits that are beneficial to paired programming. These personality
traits can be determined through various interview techniques and
the corresponding behavioral responses of the candidates.",Paired programming \& personality traits,0
28,"Extending agile methods: postmortem reviews as extended feedback
Agile software development methods, such as extreme programming, focus
on informal learning mechanisms like pair programming. Yet powerful
methods, new knowledge that is gained in a project does not spread
rapidly in an organisation if knowledge and experience is not externalised.
We propose to combine a lightweight externalisation method: postmortem
reviews with agile methods to strengthen the overall learning, and
suggest how this can be done. We use practical experience from an
Extreme Programming development project, and from conducting postmortem
analysis in several companies in our discussion.",Extending agile methods: postmortem reviews as extended feedback,0
29,"Pair programming a la dijkstra
(no abstract)",Pair programming a la dijkstra,0
30,"""Extreme programming"" - extreme programming or extreme revisionism?
Outlines the software programming problems considered in the relevant
April 1987 IEEE paper. Details the fundamental activities of extended
programming to cope with them: code writing; testing; listening to/observing
the market; and the actual process of design.. Breaks down the basic
steps of the XP process and emphasises the novel and important aspect
of pair programming. Compares the cost/time curves, the programming
time, the error rate and number of instructions required in pair-programming
as opposed to single-programming. Suggests that the XP process may
fail to provide the software 'silver bullet' because of its inability
to take account of individual requirements.","""Extreme programming"" - extreme programming or extreme revisionism?",0
31,"The reflective practitioner perspective in software engineering education
This paper focuses on the application of the reflective practitioner
(RP) perspective to the profession of software engineering (SE).
The RP perspective guides professional people to rethink their professional
creations during and after the accomplishment of the creation process.
Analysis of the field of SE supports the adoption of the RP perspective
to SE in general and to SE education in particular. The RP perspective
emphasizes the studio––the basic training method in architecture
schools––as the educational environment for design studies. In such
studios students develop projects with a close guidance of a tutor.
Analysis of the kind of tasks that architecture students are working
on and a comparison of these tasks to the problems that SE students
are facing, suggest that the studio may be an appropriate teaching
method in SE as well. The paper presents the main ideas of the RP
perspective and examines its fitness to SE in general and to SE education
in particular. The discussion is based on analysis of the RP perspective
and of the SE profession, visits to architecture studios, and conversations
with tutors in architecture studios and with computing science practitioners.",The reflective practitioner perspective in software engineering education,0
32,"XP(Extreme Programming): Software Development Process Nouvelle Vague.
Part I: Overview of XP and its Surroudings
The following topics are discussed: Extreme Programming; a planning
game; pair programming; the software life-cycle; daily schema migration;
and object-oriented programming.","XP(Extreme Programming): Software Development Process Nouvelle Vague.
Part I: Overview of XP and its Surroudings",0
33,"Distributed collaborative design over Cave2 framework
This paper presents the research and development of mechanisms to
allow distributed collaborative design of integrated systems. Those
mechanisms were implemented over the software infrastructure developed
under the Cave Project, taking advantage on both definitions of the
framework concept: classical electronic design frameworks and object-oriented
extensible data modeling. The final result is a design environment
accessible over Internet-like networks, where groups of designers
can work over the design representation in a collaborative way. In
order to organize the interaction between the designers, an extension
to the Pair Programming collaboration methodology was developed and
implemented in a case study.",Distributed collaborative design over Cave2 framework,0
34,"Student-based pair programming: an examination
This paper examines the retention and learning of unfamiliar material
to undergraduate students through the use of pair programming. Students
in a networking class were asked to develop software applications
together in the hope that each student would learn more and develop
better applications. A survey was then distributed to assess the
outcome and analyze the results.",Student-based pair programming: an examination,1
35,"Extreme programming considered harmful for reliable software development
This paper presents and discusses various facts and data collected
on extreme programming and how this method relates to traditional
software engineering practices. The paper presents reasons, albeit
no scientific proofs, why extreme programming fails to provide answers
to significant questions that contemporary software development methods
have to answer. This paper is an attempt to contribute to a discussion
that is based on data and facts.",Extreme programming considered harmful for reliable software development,0
36,"Turning the knobs: a coaching pattern for XP through agile metrics
I want to turn the knobs to 10, but my job position doesn't allow
me to dictate that my team do so. Even if it did, forcing XP may
serve only to cause resentment and backlash. Though I've been learning
XP for over a year, it's still new to the rest of our team, and we're
used to our old habits. By giving team members control of how extreme
to be through a 'teaching survey', the team has started at a comfortable
level of XP and has opened the door to future extremes. We've used
the survey to define, coach, and track our XP process and have increased
our use of XP by 10% in three months.",Turning the knobs: a coaching pattern for XP through agile metrics,0
37,"Supporting distributed extreme programming
Extreme programming (XP) is arguably improving the productivity of
small, co-located software development teams. In this paper, we described
an approach that tries to overcome the XP constraint of co-location
by introducing a process-support environment (called MILOS for Agile
Software Engineering-MILOS ASE) that helps software development teams
to maintain XP practices in a distributed setting. MILOS ASE supports
project coordination using the planning game, user stories, information
routing, team communication, and pair programming.",Supporting distributed extreme programming,0
38,"The effects of pair-programming on performance in an introductory
programming course
The purpose of this study was to investigate the effects of pair-programming
on student performance in an introductory programming class. Data
was collected from approximately 600 students who either completed
programming assignments with a partner or programmed independently.
Students who programmed in pairs produced better programs, completed
the course at higher rates, and performed about as well on the final
exam as students who programmed independently. Our findings suggest
that collaboration is an effective pedagogical tool for teaching
introductory programming.","The effects of pair-programming on performance in an introductory
programming course",1
39,"When Pairs Disagree, 1-2-3
Pair programming requires two programmers to work together to solve
the same problem. These programmers probably have opinions about
most design decisions (method names, and anything else that comes
up during a pairing session). Some of those opinions are stronger
than others. It is quite likely that those opinions will differ,
sometimes often. When they do, there needs to be a simple way to
resolve the conflict. Arguing doesn't work, and helps no one. When
a disagreement about how to proceed comes up, each pair should score
his opinion on a scale of 1-3. The highest score dictates what the
pair does next. In the event of a tie, the pair should discuss the
various options, agree to disagree, pick one, and move on. This simple
approach works.","When Pairs Disagree, 1-2-3",0
40,"Evolving to a ""lighter"" software process: a case study
Many new development processes that characterize themselves as lightweight
or agile have become fashionable, e.g. Extreme Programming (XP) (Beck,
2000; Cockburn, 2000; Rising and Janoff, 2000). Each of these processes
is focused on maximizing the effectiveness of a small team of developers
while anticipating changes in the development environment. These
processes are mainly focused on the coding phase of the process and
require strict adherence to the techniques set forth (Beck, 1999).
Since most of these processes have at least some aspects that might
seem radical to a more traditional process, e.g. pair programming
(Williams et al., 2000), an issue arises of how to integrate a lightweight
process into an existing development/maintenance effort without stalling
the effort for retraining in the new techniques? How do we evolve
a traditional process to a lighter one? This paper describes the
experiences of a development effort within an organization of the
United States government as it tried to evolve to a lighter process.
The project was subjected to both organizational and technical changes
that required the project to be able to adapt rapidly to new development
landscapes.","Evolving to a ""lighter"" software process: a case study",0
41,"How to get the most out of extreme programming/agile methods
This paper reports the results of an analysis of thirty-one extreme
programming (XP)/agile methods early adopter projects completed by
fourteen firms who have embraced the techniques in the form of lessons
learned. The survey results show that early adopters have cut costs,
improved productivity and reduced time to market through the use
of these methods. To get the most from these methods, fifteen lessons
learned have been developed that build on the experiences of others.
Several of these lessons run counter to the teachings of the methodology
developers. The paper next provides a scorecard that rates XP's performance
in eight application domains. The paper concludes by summarizing
four critical success factors for early adopters.",How to get the most out of extreme programming/agile methods,0
42,"How good are agile methods?
The software industry seems to be embracing yet another change to
the way it does business. Because of their emphasis on agility and
time-to-market, many programming shops are moving to agile methods.
Unlike more traditional approaches, these methods focus on generating
early releases of working products using mostly collaborative techniques
such as pair programming, refactoring, and having customers work
on site as team members. Programmers use these releases-which are
working products, not prototypes-to demonstrate features and functions
to stakeholders involved in their use, marketing, and support. This
article surveys the experience software engineers in a wide, range
of industries have had in deploying agile methods.",How good are agile methods?,0
43,"Tracking Test First Pair Programming - An Experiment
The authors ran an experiment where a group of professional programmers
working in pairs and a control group programming alone implemented
a small system from predefined requirements. Most programmers spent
between 50% and 60% of time on testing; only the most inexperienced
spent less. Programmers reported more problems with refactoring than
testing. The rhythm of switching the driver and navigator role is
essential for test-first pair programming. The experiment showed
that partners switched roles 21 times per day on average. The comparison
of the control group of individuals and the group programming in
pairs showed that both groups spent almost the same amount of time
to complete the tasks. The result of this comparison is by applying
a t-test not statistically significant. We believe that more detailed
research apart of evaluating test-first programming is needed to
compare solo vs. pair programming in the investigated group.",Tracking Test First Pair Programming - An Experiment,0
44,"Collaborative design using a shared object spaces infrastructure
A collaborative design system strongly depends on the chosen collaboration
methodology, as well as on its technological infrastructure. This
article describes the implementation of collaborative service based
on shared object spaces as technological infrastructure and its methodology
is based on pair programming. This service is to be incorporated
in a distributed collaborative environment called Cave. The collaboration
service implementation presented in this work allows collaboration
among designers through a data depository. This service is validated
with a diagram editor that is used as case study.",Collaborative design using a shared object spaces infrastructure,0
45,"Freeing the slave with two masters: an embedded programming team's
transition to XP
The article looks at one team's experience with extreme programming
(XP) which began halfway through a three-year development effort.
The authors then convinced the other team members and management
to try using XP's planning game and pair programming practices.","Freeing the slave with two masters: an embedded programming team's
transition to XP",0
46,"Pair programming and the factors affecting Brooks' law
Frederick Brooks states in his book The Mythical Man-Month , ""Adding
manpower to a late software project makes it later."" Brooks explains
that often software development managers react to schedule problems
by adding more manpower to the project. However, the new team members
take some time initially to be trained and assimilated into the project.
Assimilation time is the time the new team member takes to understand
project specific details. Also, if the subprojects assigned to each
engineer are interrelated, intercommunication requirements rise since
each part of the task must be separately coordinated with each other
part. Thus, Brooks contends that when manpower is added to a late
project the overall productivity goes down, delaying the project
even further. This research investigates the effects of pair programming
on the training, assimilation and intercommunication, as mentioned
in Brooks' Law. Pair programming is a practice in which two programmers
work together at one computer, continuously collaborating on the
same design, algorithm, code, or test. Most software development
teams that practice pair programming also practice pair rotation.
With pair rotation, engineers periodically change their pairing partner.
Pair programming and pair rotation have previously been shown to
aid teams in improving code and design quality and to improve teamwork.
In this research, we investigated additional benefits of the pair
programming and pair rotation practices. Through surveys and mathematically
modeling, we found the following: (1) Pair programming reduces intercommunication
time within a team. (2) Pair programming reduces mentoring time when
new members are added to a team. (3) Pair programming reduces assimilation
time when new members are added to a team. (4) Manpower can be added
to a late software project provided the additional useful effort
delivered to the project is adequate to achieve the desired schedule.
Pair programming can make this more achievable.",Pair programming and the factors affecting Brooks' law,0
47,"Adapting Extreme Programming for a core Software Engineering Course
Over a decade ago, the manufacturing industry determined it needed
to be more agile to

thrive and prosper in a changing, nonlinear, uncertain and unpredictable
business environment. Recently, the software engineering community
has come to the same realization. A group of software methodologists
has created a set of software development processes, termed agile
methodologies that have been specifically designed to respond to
the demands of the turbulent software industry. Each of the processes
in the set of agile processes is comprised of a set of practices.
As educators, we must assess the emerging agile practices, integrate
them into our courses (carefully), and share our experiences and
results from doing so. This paper discusses the use of Extreme Programming,
a popular agile methodology, in a senior Software Engineering course
at North Carolina State University. It then provides recommendations
for integrating

agile principles into a core Software Engineering course.",Adapting Extreme Programming for a core Software Engineering Course,0
48,"Pair programming: addressing key process areas of the People-CMM
It has been long recognized that the quality of the people employed
by a software organization is a major determinant of the quality
of its products. Acknowledging the pivotal role played by people
in software development, the Software Engineering Institute (SEI)
devised the People - Capability Maturity Model. Like its software
counterpart, the People CMM (P-CMM) defines five levels of maturity.
An organization can achieve a level by institutionalizing the ""best
practices"" for that level. The best practices are grouped together
as Key Process Areas (KPAs). Pair programming is a practice in which
two programmers work together at one computer on a single module
of code designing, coding and testing it together. Evidence indicates
that pair programming improves teamwork, communication and knowledge
levels - all KPAs of the P-CMM. This paper establishes a link between
pair programming and the KPAs defined in the P-CMM. Specifically,
the paper provides an outline on the advantages and effects of adopting
pair programming if an organization wants to achieve a higher P-CMM
level.",Pair programming: addressing key process areas of the People-CMM,0
49,"Preliminary Analysis of the effects of pair programming on job satisfaction
Pair programming is one of the most controversial parts of XP. Claims
are mostly based on anecdotal evidence and limited experimentation
performed in classroom settings. This paper reports the preliminary
results of an analysis of the effects of pair programming on job
satisfaction. A questionnaire on pair programming techniques has
been compiled and posted on the web. 108 responses have been collected
from around the world. The preliminary results evidence a very positive
effect of pair programming on job satisfaction.",Preliminary Analysis of the effects of pair programming on job satisfaction,0
50,"A Comparison of Pair Programming to Inspections for Software Defect
Reduction
Even though convinced of their efficacy, software development managers
are looking for ways to reduce the cost of inspections. Recent work
shows that inspections by two engineers have as good results as by
using a larger team of five. This indicates that pair programming
might be effective as an inspection technique, as other research
shows that a meeting is not necessarily better than not meeting.
An experiment was conducted to see if pair programming reduces defects
more than formal inspections. Results indicate that pair programming
is more effective. A defect rate of 9.6 per thousand lines of code,
much lower than that of a heavier method, were achieved. The implications
for teaching are explored.","A Comparison of Pair Programming to Inspections for Software Defect
Reduction",1
51,"Pair Programming: Experience the Difference
Pair programming is emerging as an important technique for developing
higher quality code, faster. With pair programming, two software
developers work on one computer, collaborating on the same design,
algorithm, code, or test. This tutorial examines pair programming
research results and anecdotal experiences of programmers who have
transitioned to pair programming. It will discuss what works and
what doesn’t and will also explain techniques for fostering support
in making a transition to pair programming – support from management
and support from peers. Hands-on activities will be used to demonstrate
pair programming benefits.",Pair Programming: Experience the Difference,0
52,"In Support of Pair Programming in the Introductory Computer Science
Course
A formal pair programming experiment was run at North Carolina to
empirically assess the educational efficacy of the technique in a
CS1 course. Results indicate that students who practice pair programming
perform better on programming projects and are more likely to succeed
by completing the class with a C or better. Student pairs are more
self-sufficient which reduces their reliance on the teaching staff.
Qualitatively, paired students demonstrate higher order thinking
skills than students who work alone. These results are supportive
of pair programming as a collaborative learning technique.","In Support of Pair Programming in the Introductory Computer Science
Course",1
53,"Pair Programming in an Introductory Computer Science Course: Initial
Results and Recommendations
Prior research indicates that pair programming, whereby two programmers
work collaboratively on the same design, algorithm, code, or test,
produces higher quality code in essentially half the time taken by
solo programmers. An experiment was run at North Carolina to assess
the efficacy of pair programming in the introductory CS1 course.
Results indicate that relative to students who program individually,
pair programmers are more self-sufficient, perform better on projects,
and are more likely to complete the class with a C or better.","Pair Programming in an Introductory Computer Science Course: Initial
Results and Recommendations",0
54,"Experimental evaluation of two approaches to software artefacts review
The classical approach to software artefacts review is based on two
phases: first a developer produces an artefact (design, code etc.),
and then a reviewer (or reviewers) check quality. That paradigm has
been changed recently by a software development methodology called
Extreme Programming (XP). One of key practices of XP is pair programming:
while one programmer writes code the other is performing on-line
review, i.e. programming and reviewing are performed in the same
phase (simultaneously). In the paper an experiment is described that
aimed at comparing those two approaches to software review.",Experimental evaluation of two approaches to software artefacts review,0
55,"XP as a Framework for Practical Software Engineering Experiments
We discuss how Extreme Programming (XP) can be used as the base software
development method to per-form practical experiments in software
engineering. We show how the main features of XP can help us to minimize
some of the problems and difficulties that appear when trying to
perform such experiments in a university environment. We also discuss
the execution and experiences from one experiment studying a new
methodology: the Stepwise Feature Introduction.",XP as a Framework for Practical Software Engineering Experiments,0
56,"Not really pair programming
(no abstract)",Not really pair programming,0
57,"Lessons learned about distributed pair programming: what are the
knowledge needs to address?
We have realized an experiment aimed at understanding the impact of
distribution on time and quality of code developed with pair programming.
From this experimental data's analysis the pair dismissal phenomenon
has stemmed. After the experiment, we have conducted an assessment
discussion guided by a questionnaire. The assessment confirmed the
dismissal hypothesis and highlighted knowledge needs to be addressed
when managing distributed pair programming in software projects.
This paper focuses on the results of the assessment and discusses
the lessons learned.","Lessons learned about distributed pair programming: what are the
knowledge needs to address?",0
58,"Experiences with Pair programming at a Small College
Pair programming is a technique in which two programmers work side-by-side
at one computer on the same program or problem. This paper discusses
the use of pair programming in an introductory programming course
at a small college and includes the results of a survey given to
the students at the conclusion of the fall 2002 semester. The use
of pair programming produces better projects in less time, and results
in fewer assignments for the teaching staff to grade. Exam scores
seem to be comparable with courses that do not allow students to
program in pairs. Student evaluation of pair programming seems to
be very positive; most students enjoy the class more when allowed
to program in pairs and the group work promoted in the course teaches
students important collaboration skills they will need in industry.
The results discussed in this paper seem to suggest that pair programming
is an effective teaching tool for introductory programming courses.",Experiences with Pair programming at a Small College,1
59,"Pair Programming and Pair trading:Effects on Learning and motivation
in a CS2 courses
Pair programming is a seemingly powerful addition to the tool kit
of educators wishing to enhance learning in software engineering
students. This technique, found among professional software development
practices associated with extreme programming (Beck), has probably
existed informally for some time in various forms of collaborative
software development. More recently pair programming has been formalized
and used as an intentional pedagogical tool in the classroom. During
the Spring semester of 2002, the author implemented a multi-phase
project in CS2 similar to the one described by Newhall and Meeden
(2002). The author used pair-programming and pair-trading to facilitate
the production of high quality code. Qualitative data were collected
from the students throughout the project. This paper documents the
qualitative study and sheds some light on why pair programming can
be successful in educational applications, and also how pair programmers
can be assessed.","Pair Programming and Pair trading:Effects on Learning and motivation
in a CS2 courses",1
60,"Conflict in Collaborative Software Development
Pair Programming is an innovative collaborative software development
methodology. Anecdotal and empirical evidence suggests that this
agile development method produces better quality software in reduced
time with higher levels of developer satisfaction. To date, little
explanation has been offered as to why these improved performance
outcomes occur. In this qualitative study, we focus on how individual
differences, and specifically task conflict, impact results of the
collaborative software development process and related outcomes.
We illustrate that low to moderate levels of task conflict actually
enhance performance, while high levels mitigate otherwise anticipated
positive results.",Conflict in Collaborative Software Development,1
61,"The economics of software development by pair programmers
Evidence suggests that pair programmers - two programmers working
collaboratively on the same design, algorithm, code, or test-perform
substantially better than the two would work alone. Improved quality,
teamwork, communication, knowledge management, and morale have been
among the reported benefits of pair programming. This paper presents
a comparative economic evaluation that strengthens the case for pair
programming. The evaluation builds on the quantitative results of
an empirical study conducted at the University of Utah. The evaluation
is performed by interpreting these findings in the context of two
different, idealized models of value realization. In the first model,
consistent with the traditional waterfall process of software development,
code produced by a development team is deployed in a single increment;
its value is not realized until the full project completion. In the
second model, consistent with agile software development processes
such as extreme programming, code is produced and delivered in small
increments; thus its value is realized in an equally incremental
fashion. Under both models, our analysis demonstrates a distinct
economic advantage of pair programmers over solo programmers. Based
on these preliminary results, we recommend that organizations engaged
in software development consider adopting pair programming as a practice
that could improve their bottom line. To be able to perform quantitative
analyses, several simplifying assumptions had to be made regarding
alternative models of software development, the costs and benefits
associated with these models, and how these costs and benefits are
recognized. The implications of these assumptions are addressed in
the paper.",The economics of software development by pair programmers,0
62,"Pair programming: More learning and less anxiety in a first programming
course
The impact of pair programming in education design to enhance the
student's learning experience through team is discussed. It involves
the students undertaking and completing some aspect of their programming
work as a team of two. The objective of this course is to teach first-year
engineering student logic and problem solving skill through algorithm
programming. The objective analysis taking into consideration the
students grades and timesheet support, at a prima facie level, the
students' accounts of their experiences.","Pair programming: More learning and less anxiety in a first programming
course",1
63,"Collaboration on software tasks
In pair programming (PP), two developers work together on the same
task using one computer and keyboard. PP involves not just coding,
but many phases of the software development process such as design
and testing. PP has been proposed by several authors since the 70's,
but it is primarily during the last three to four years that some
of the claimed benefits have been tested empirically.",Collaboration on software tasks,0
64,"An Initial Framework for Research on Pair Programming
In recent years, several claims have been put forward in favour of
pair programming, as opposed to individual programming. However,
results from existing studies on pair programming contain apparent
contradictions. The differences in the context in which the studies
were conducted may be one explanation for such results. The paper
presents an initial framework for research on pair programming. The
aim is to support empirical studies and meta-analysis for developing
theories about pair programming. The framework is based on: (1) existing
studies on pair programming, (2) ongoing studies by the authors,
and (3) theories from group dynamics.",An Initial Framework for Research on Pair Programming,0
65,"Is pair programming an effective way to learn computer architecture?
Pair programming is a concept where two programmers work side by side
at the same computer, writing code jointly. One of them, called the
driver, is in control of the keyboard and mouse. The other, called
the navigator, observes what the driver is doing and offers advice.
It is the driver's job to write the code. The navigator has a chance
to observe the larger picture, evaluating the driver's code for correctness
of design and implementation. Studies have shown that pair programming
is very effective. Two programmers can finish a task in little over
half the elapsed time that a single programmer takes. And the quality
of the code - measured in terms of absence of defects - is much higher.
In the past few years, pair programming has made inroads into industry
and into programming courses. However, it has not typically been
used in courses that teach subjects other than programming or software
engineering, nor has it been used in the analysis of experimental
results. This paper reports on an experiment in a combined senior/masters
level computer architecture class, using Hennessy & Patterson's Computer
Architecture: A Quantitative Approach as a text. Students were required
to implement three projects simulating various aspects of a microarchitecture
(cache, branch predictor, dynamic instruction scheduler). Then they
engaged in an experimental analysis to find the best configuration
in a design space. They were encouraged to pair-program, and data
were gathered on their experience.",Is pair programming an effective way to learn computer architecture?,0
66,"A Pair-Programming experiment in a Non-Programming courses
Pair programming is a concept where two programmers work side by side
at the same computer, writing code jointly. One of them, called the
driver, is in control of the keyboard and mouse. The other, called
the navigator, observes what the driver is doing and offers advice.
It is the driver’s job to write the code. The navigator has a chance
to observe the larger picture, evaluating the driver’s code for correctness
of design and implementation. Studies have shown that pair programming
is very effective. Two programmers can finish a task in little over
half the elapsed time that a single programmer takes. And the quality
of the code measured in terms of absence of defects—is much higher.
In the past few years, pair programming has made inroads into industry
and into programming courses. However, it has not typically been
used in courses that teach subjects other than programming or software
engineering, nor has it been used in the analysis of experimental
results. This paper reports on an experiment in a combined senior/masters-level
computer architecture class, using Hennessy & Patterson’s Computer
Architecture: A Quantitative Approach as a text. Students were required
to implement three projects simulating various aspects of a microarchitecture
(cache, branch predictor, dynamic instruction scheduler). Then they
engaged in an experimental analysis to find the best configuration
in a design space. Students reported high levels of satisfaction
with the experience of pair programming. Pair programmers obtained
significantly higher grades on Project 1; however, differences on
the other projects were not statistically significant.",A Pair-Programming experiment in a Non-Programming courses,1
67,"Pair-programming effect on developers productivity
This paper gives an overview of a pair programming experiment designed
to verify how pair programming affects programmer's technical productivity.
The experiment took place at the Institute of Computer Science, University
of Tartu (UT), Estonia. The paper includes the problem statement,
description of the experimental design, the experiment results, and
a discussion about the validity of the results. During the experiment
pair programming worked well in getting early testable programming
results, pair programmers and nonpair programmers performed with
similar final results.",Pair-programming effect on developers productivity,1
68,"Method engineering for OO systems development
For the past 15 years, many proposed OO methodologies have sought
to deliver full life-cycle support for systems development using
OO tools. Many are highly prescriptive, that is, the methodology
elements are highly interconnected. This inherent complexity makes
it difficult for a methodology to be adapted to project-specific
circumstances, especially (and usually) when project managers and
developers are advised by the methodology's creator that they must
use all or none of the components of the methodology. Indeed, even
with the advent of agile methodologies, frequently touted by their
developers as offering more people-focus and flexibility, proponents
often say an agile methodology like extreme programming (XP) is followed
in its entirety and that XP without, say, pair programming is not
XP. This metamodel-based framework helps distill the key ingredients
in software engineering processes in ways that facilitate method
engineering, along with process understanding.",Method engineering for OO systems development,0
69,"Formal extreme (and extremely formal) programming
This paper is an exploratory work where the authors study how the
technology of formal methods (FM) can interact with agile process
in general and with extreme programming (XP) in particular. Our thesis
is that most of XP practices (pair programming , daily build , the
simplest design or the metaphor ) are technology independent and
therefore can be used in FM based developments. Additionally, other
essential pieces like test first , incremental development and refactoring
can be improved by using FM. In the paper we explore in a certain
detail those pieces: when you write a formal specification you are
saying what your code must do, when you write a test you are doing
the same so the idea is to use formal specifications as tests. Incremental
development is quite similar to the refinement process in FM: specifications
evolve to code maintaining previous functionality. Finally FM can
help to remove redundancy, eliminate unused functionality and transform
obsolete designs into new ones, and this is refactoring.",Formal extreme (and extremely formal) programming,0
70,"An empirical analysis on the discontinuous use of pair programming
Pair programming has been shown to increase communication and teamwork
skills and to provide better code. The aim of this work is to show
the efficacy of pair programming in transferring knowledge and skills
over an environment where people met only occasionally. In a quasi
experiment, we find that pair programming is effective in sharing
knowledge among 15 students who met once a week for a half day, and
did their internship individually or in couple for the remaining
4 half days.",An empirical analysis on the discontinuous use of pair programming,1
71,"Extreme programming: a more musical approach to software development?
This paper considers the relationship between software development
as it is typically practiced, the extreme programming methodology
and the learning and working environment of those involved in a creative
art - music. In particular we emphasise how pair programming can
facilitate an increase in the overall skill level of individuals
and teams, and relate this to musicians' development of models of
excellence through ensemble playing. Consideration is also given
to the psychology of music performance and its relevance to the pursuit
of excellence in software development.",Extreme programming: a more musical approach to software development?,0
72,"Hidden skills that support phased and agile requirements engineering
Phased development does requirements engineering in one or a small
number of extended phases occurring early in a project. Agile development
also does requirements engineering, but in thousands of small conversations
spread throughout the development life cycle. Each depends on subtly
different skills and expertise to perform its practices - agile development
depending heavily on ability to change working code, phased development
depending heavily on foresight. We survey the special skills that
each style of requirements engineering depends on in order to promise
and deliver.",Hidden skills that support phased and agile requirements engineering,0
73,"The Effects of Individual XP Practices on Software Development Effort
Traditional heavyweight software development methodologies are rigid,
heavily documentation oriented and process oriented. In the present
E-Business dominated environment, the above methodolo-gies are hard
to follow. In response to this, a new generation of lightweight methodologies
such as Extreme Programming (XP) has evolved which has only a few
simple rules to adopt, and insist on less documentation. XP proposes
four values, a development process and twelve practices. One of the
significant benefits among those claimed by the inventors of XP is
the reduction of effort in the software development. However, the
extent of ful-fillment of this claim remains unanswered by empirical
and quantitative evidences. Hence, the effects of XP on software
development effort are to be investigated. In this study, we devel-oped
a process simulation model to analyze the effects of individ-ual
XP practices on development effort. System dynamics based simulation,
an effective modeling technique for software devel-opment process
was chosen. This model has accounted for all the twelve practices
and processes of XP. We have also introduced a measurement scale
for measuring the level of usage of individual XP practices. The
factors that affect the cost are collected from literature and a
few XP project managers. The process model was simulated for a case
study of a typical XP project to investigate the effects of individual
XP practices on development effort by vary-ing their usage levels.
The decrease in percentage of the develop-ment effort for each XP
practice when its usage level is varied from minimum to maximum during
which all the other practices were maintained at a constant usage
level was found. The decrease in percentage of the development effort
for each XP practice when its usage level is minimum and maximum
was computed and is given below. (i) Planning game - 2.67% (ii) Small
Release - 2.67% (iii) Metaphor - 2.01% (iv) Simple design - 2.5%
(v) Con-tinuous Testing - 2.88% (vi) Refactoring -0.677% (vii) On-site
Customer - 5.48% (viii) Pair programming - 4.4% (ix) Collective Code
Ownership – 4.82% (x) Forty Hours Per Week - 2% (xi) Coding Standard
- 4.82% (xii) Continuous Integration - 1.13%. The finding of the
present study on the effects of individual XP practices depicts a
reduction in software development effort by enhancing their usage
levels.",The Effects of Individual XP Practices on Software Development Effort,0
74,"When does a pair outperform two individuals?
This paper reports experimental measurements of productivity and quality
in pair programming. The work complements Laurie Williams' work on
collaborative programming, in which pair programming and solo programming
student groups wrote the same programs and then their activities
were measured to investigate productivity, quality, etc. In this
paper, pair and solo industrial programmer groups are requested to
complete algorithm-style aptitude tests so as to observe the capability
of solving algorithms in singles and in pairs. So doing is independent
of the familiarity of a programming language. Besides, we also take
another approach to examining pair programming. A single group of
industrial programmers carries out alternately pair programming and
solo programming. All these demonstrate that productivity in pair
programming hinges upon algorithm design at all levels from understanding
problems and implementing solutions. In addition, we reach similar
conclusions to Williams. Our findings indicate that simple design,
refactoring, and rapid feedback provide an excellent continuous-design
environment for higher productivity in pair programming.",When does a pair outperform two individuals?,0
75,"Experimenting with pair programming in the classroom
There is now a substantial body of evidence in support of the use
of pair programming in the classroom. Some of the data is anecdotal
and some is the result of formal experiments. We are not aware of
any published data that raises concerns about allowing students to
complete programming projects using pair programming. In this paper
we present data from three studies performed at UCSC. All three studies
support the position that pair programming results in more student
learning.",Experimenting with pair programming in the classroom,1
76,"The Impact of Pair Programming on Student Performance, Perception
and Persistence
This study examined the effectiveness of pair programming in four
lecture sections of a large introductory programming course. We were
particularly interested in assessing how the use of pair programming
affects student performance and decisions to pursue computer science
related majors. We found that students who used pair programming
produced better programs, were more confident in their solutions,
and enjoyed completing the assignments more than students who programmed
alone. Moreover, pairing students were significantly more likely
than non-pairing students to complete the course, and consequently
to pass it. Among those who completed the course, pairers performed
as well on the final exam as non-pairers, were significantly more
likely to be registered as computer science related majors one year
later, and to have taken subsequent programming courses. Our findings
suggest that not only does pairing not compromise students' learning,
but that it may enhance the quality of their programs and encourage
them to pursue computer science degrees.","The Impact of Pair Programming on Student Performance, Perception
and Persistence",1
77,"On the economic evaluation of XP projects
From a project economics point of view, the most important practices
of extreme programming (XP) are pair programming and test-driven
development. Pair programming leads to a large increase in the personnel
cost, and test-driven development adds to the development effort.
On the other hand, pair programming can speed the project up; both
pair programming and test-driven development can reduce the defect
density of the code. Can the increased cost of XP be balanced by
its shorter time to market and higher code quality? To answer this
question, we construct a new model for the business value of software
projects. We then analyze the cost and benefit of XP by applying
our model to a realistic sample project. We systematically vary important
model parameters to provide a sensitivity analysis. Our analysis
shows that the economic value of XP strongly depends on how large
the XP speed and defect advantage really are. We also find that the
market pressure is an important factor when assessing the business
value of XP. Our study provides clear guidelines for managers when
to consider using XP - or better not.",On the economic evaluation of XP projects,0
78,"Improving the CS1 experience with pair programming
Pair programming is a practice in which two programmers work collaboratively
at one computer, on the same design, algorithm, or code. Prior research
indicates that pair programmers produce higher quality code in essentially
half the time taken by solo programmers. An experiment was run to
assess the efficacy of pair programming in an introductory Computer
Science course. Student pair programmers were more self-sufficient,
generally perform better on projects and exams, and were more likely
to complete the class with a grade of C or better than their solo
counterparts. Results indicate that pair programming creates a laboratory
environment conducive to more advanced, active learning than traditional
labs; students and lab instructors report labs to be more productive
and less frustrating .",Improving the CS1 experience with pair programming,0
79,"Pair learning: With an eye toward future success
Pair programming is a practice in which two programmers work collaboratively
at one computer on the same design, algorithm, or code. Prior research
indicates that pair programmers produce higher quality code in essentially
half the time taken by solo programmers. Pair programming is becoming
increasingly popular in industry and in university curricula. An
experiment was run at North Carolina State University over a period
of one and a half years to assess the efficacy of pair programming
as an alternative educational technique in an introductory programming
course. We found that the retention rate of the students in the introductory
programming courses is equal to or better than that of the students
in the solo programming courses. Most students show a positive attitude
towards collaborative programming, and students in paired classes
continue to be successful in subsequent programming classes that
require solo programming. Pair programming also leads to a reduced
workload for the course staff in terms of grading, questions answered
and teaching effort.",Pair learning: With an eye toward future success,0
80,"Distributed Pair Programming on the Web
Pair programming is an extreme programming practice, where two programmers
working sided by side on a single computer produce a software artifact.
This technique has demonstrated to produce higher quality code in
less time it would take an individual programmer. We present the
COPPER system, a synchronous source code editor that allows two distributed
software engineers to write a program using pair programming. COPPER
implements characteristics of groupware systems such as communication
mechanism, collaboration awareness, concurrency control, and a radar
view of the documents, among others. It also incorporates a document
presence module, which extends the functionality of instant messaging
systems to allow users to register documents from a Web server and
interact with them in a similar fashion as they do with a colleague.
We report results from a preliminary evaluation of COPPER which provide
evidence that the system could successfully support distributed pair
programming.",Distributed Pair Programming on the Web,0
81,"Convincing the inconvincable
Despite the increasing knowledge base within the IT industry worldwide
about the tremendous benefits of XP and agile processes, there is
still a long way to go to convince a lot of developers. A side effect
of this popularity is that XP practices may have a negative connotation
for some. This may result in a reluctance to try or adopt any of
these practices. This paper describes some strategies that may be
employed by project team members to help those that seem ""inconvincible""
to recognise some of the benefits of XP. Introducing XP should be
an evolution not a revolution.",Convincing the inconvincable,0
82,"Analyzing the cost and benefit of pair programming
We use a combination of metrics to understand, model, and evaluate
the impact of pair programming on software development. Pair programming
is a core technique in the hot process paradigm of extreme programming.
At the expense of increased personnel cost, pair programming aims
at increasing both the team productivity and the code quality as
compared to conventional development. In order to evaluate pair programming,
we use metrics from three different categories: process metrics such
as the pair speed advantage of pair programming; product metrics
such as the module breakdown structure of the software; and project
context metrics such as the market pressure. The pair speed advantage
is a metric tailored to pair programming and measures how much faster
a pair of programmers completes programming tasks as compared to
a single developer. We integrate the various metrics using an economic
model for the business value of a development project. The model
is based on the standard concept of net present value. If the market
pressure is strong, the faster time to market of pair programming
can balance the increased personnel cost. For a realistic sample
project, we analyze the complex interplay between the various metrics
integrated in our model. We study for which combinations of the market
pressure and pair speed advantage the value of the pair programming
project exceeds the value of the corresponding conventional project.
When time to market is the decisive factor and programmer pairs are
much faster than single developers, pair programming can increase
the value of a project, but there also are realistic scenarios where
the opposite is true. Such results clearly show that we must consider
metrics from different categories in combination to assess the cost-benefit
relation of pair programming.",Analyzing the cost and benefit of pair programming,0
83,"Dear diary: the making of an XP team
The author discusses his experience working with a software technology
company during the introduction of XP. While there had been some
success at employing practices such as the planning game, stand-up
meetings, and pair programming, the company was struggling. He realized
the biggest thing they were lacking was the concept that XP is about
the team delivering great software, not the individual or a group
of individuals. His first challenge, then, was to help them become
a team. A a journal of events that occurred while I was working with
this team of 10 developers is presented.",Dear diary: the making of an XP team,0
84,"Future fixes [software development management]
With a little common sense and dependable metrics, software developers
can banish the bug-bucket and keep dreaded rework under control by
creating a reasonable prediction of a project completion. These measures
include: historical information, estimation quality factor and fault
feedback ratio. In addition, critical-chain buffer management can
help to schedule the project to allow for rework during each task
or in the planning stage. Agile techniques also offer immediate feedback,
helping to create fewer defects and less rework. Incorporating such
techniques as test-first development, automated unit testing and
pair programming - or at least have another pair of eyes review the
code. In handling a large project with several agile teams and it
is unsure if there is enough time to catch all the defects in each
iteration, plan on a defect search-fix mission on one iteration before
releasing it to the client.",Future fixes [software development management],0
85,"Virtual teaming: Experiments and experiences with distributed pair
programming
Pair programming is a practice in which two programmers work together
at one computer, collaborating on the same design, algorithm, code
or test. Previous studies have shown that pair programmers produce
higher quality code in essentially the same amount of time as solo
programmers. Additional benefits include increased job satisfaction,
improved team communication, and efficient tacit knowledge sharing.
However, it may not always be possible for all team members to be
collocated due to the rise in teleworking and geographically distributed
teams. This paper analyzes the results of two distributed pair programming
case studies done at UNC Chapel Hill and at NC State University.
Participants used readily available off-the-shelf applications for
collaborative software development. The results indicate that software
development collaboratively ""over the wire"" is feasible, effective,
and pleasant for the participants; distributed development is better
done as synchronous pairs than as individuals who integrate; and
distributed pairs maintain many of the advantages of collocated pairs.","Virtual teaming: Experiments and experiences with distributed pair
programming",0
86,"Code warriors and code-a-phobes: a study in attitude and pair programming
This paper reports on how first-year students who have programmed
before see their programming interest and ability and how this self-perception
relates to their performance in the introductory programming course.
In particular we examine how this self-perception is reflected in
their reactions to the pairprogramming

technique for developing software. Students who had programming experience
before University were given a survey that placed them on a scale
that we have

called Code Warrior to Code-a-phobe. We then placed them in opposite
and similar pairs for a pair programming exercise and surveyed their
reactions. There was evidence that students who have considerable
self-confidence do not enjoy the experience of pair programming as
much as other students and that students produce their best work
when placed in pairs with students of similar self-confidence levels.",Code warriors and code-a-phobes: a study in attitude and pair programming,1
87,"Improving the interface between business and product development
using agile practices and the cycles of control framework
We describe how we created and adopted an agile product development
process in a small software company based on the cycles of control
framework by combining selected agile practices and principles from
the scrum and XP methodologies. Describing the development process
using the framework helped in identifying the crucial control points
between business and development and enabled defining practical and
well-functioning connections between them. The control points enable
visibility and flexible management of product development status
and direction. Currently business understands development status
better, which has led to fewer interruptions between the control
points, and thus improved working conditions for development. Positive
experiences are reported of newly adopted practices such as scrum
meetings, pair programming, and unit testing. However, finding and
adopting technical tools to facilitate the process proved to be challenging.","Improving the interface between business and product development
using agile practices and the cycles of control framework",0
88,"Pair Programming in Introductory Programming Labs
This project looks at the practice of pair programming as a vehicle
for improving the learning environment in introductory computer science
labs, a nearly universal course for all engineering students. Pair
programming is a practice in which two programmers work collaboratively
at one computer, on the same design, algorithm, or code. Prior research
indicates that pair programmers produce higher quality code in essentially
half the time taken by solo programmers. A multiyear project is currently
underway at North Carolina State University, looking at the efficacy
of pair programming in an introductory Computer Science (CS1) course.
Results indicate that student pair programmers are more self-sufficient
in lab and are more likely to complete the class with a grade of
C or better. The effect of pair programming on specific graded exams
and projects are less clear. Demographic data, prior achievement
scores, and current course scores were brought together with interview
data, attitude surveys, and in-lab observations to guide the evaluation.
As part of the in-lab data collection, novel techniques are being
developed to better understand pair dynamics and student/instructor
interactions. Collectively, these evaluative methods have guided
the iterative implementation of paired programming instructional
methods. Current challenges being addressed include lab instructor
training, student/instructor concerns over equity in effort on assignments,
pair dynamics in lab, and collaborative logistics of pair programming
outside of lab.",Pair Programming in Introductory Programming Labs,0
89,"Building pair programming knowledge through a family of experiments
Pair programming is a practice in which two programmers work collaboratively
at one computer on the same design, algorithm, code, or test. Pair
programming is becoming increasingly popular in industry and in university
curricula. A family of experiments was run with over 1200 students
at two US universities, North Carolina State University and the University
of California Santa Cruz, to assess the efficacy of pair programming
as an alternative learning technique in introductory programming
courses. Students who used the pair programming technique were at
least as likely to complete the introductory course with a grade
of C or better when compared with students who used the solo programming
technique. Paired students earned exam and project scores equal to
or better than solo students. Paired students had a positive attitude
toward collaboration and were significantly more likely to be registered
as computer science-related majors one year later. Our findings also
suggest that students in paired classes continue to be successful
in subsequent programming classes continue to be successful in subsequent
programming classes that require solo programming.",Building pair programming knowledge through a family of experiments,1
90,"Exploring XP for scientific research
Can we successfully apply XP (Extreme Programming) in a scientific
research context? A pilot project at the NASA Langley Research Center
tested XPs applicability in this context. Since the cultural environment
at a government research center differs from the customer-centric
business view, eight of XPs 12 practices seemed incompatible with
the existing research culture. Despite initial awkwardness, the authors
determined that XP can function in situations for which it appears
to be ill suited.",Exploring XP for scientific research,0
91,"Technical and Human Perspectives on Pair Programming
Extreme Programming is presented as an answer to problems in software
engineering. Extreme Programming is briefly introduced and one of
its primary principles, pair programming, is examined more closely.
Drawing from readings and Medtronic employee interviews, potential
challenges to pair programming are discussed and analyzed. Finally,
recommendations for those considering pair programming are suggested.",Technical and Human Perspectives on Pair Programming,0
92,"Description of an empirical experiment to measure effects of pair
work on the design phase
This paper presents a description of an empirical experiment into
the effects of pair work on the design phase of the software development
lifecycle. The aims of the experiment are to compare the quality
of the design products produced by pair designers and individual
designers as well as compare the efficiency and cost effectiveness
of the pair work and the individual work paradigms in the design
process. In addition, the experiment studies the partners expectations
and practices during the pair work experience. In this paper we make
the case for conducting such an experiment, and detail the experimental
hypotheses, design, inputs, outputs, and evaluation measures.","Description of an empirical experiment to measure effects of pair
work on the design phase",0
93,"eXtreme Programming support tool in distributed environment
eXtreme Programming (XP) is an agile software development process
in which both short period iterative development arid communication
between project members are important. Software development aims
at producing high quality programs within a promised period. To gain
an improvement in product quality, XP proposes twelve practices such
as pair programming, test driven development, refactoring, etc. Pair
programming makes it possible for all project members to deepen understanding
of their programs, and also it becomes easy to find the error of
them. Consequently, it improves quality of their programs. It is
required that the pair has to work together with sufficient communication.
However, in realistic software development, it is necessary to carry
out development in the distributed environment by time and spatial
restrictions of developers, such as office environment, and telecommuting,
an international project. In XP, since communication is important,
we propose XP support environment on a network from the viewpoint
of pair programming support so that the quality of a program can
be improved also in distributed environment.",eXtreme Programming support tool in distributed environment,0
94,"Voices of women in a software engineering course: Reflections on
collaboration
Those science, mathematics, and engineering faculty who are serious
about making the education they offer as available to their daughters
as to their sons are, we posit, facing the prospect of dismantling
a large part of its traditional pedagogical structure, along with
the assumptions and practice which support it. [Seymour and Hewett
1997]. Prior research indicates that female students can be concerned
about the insularity of working alone for long periods of time, as
they perceive to be the case with computer science and information
technology careers. We studied an advanced undergraduate software
engineering course at North Carolina State University to characterize
the potential of collaborative learning environments created via
pair-programming and agile software development to ameliorate this
concern. A collective case study of three representative women in
the course revealed that they held the following four themes in common:
working with others; productivity; confidence; and interest in IT
careers. Three conjectures concerning collaboration emerged from
our study, including the importance of face-to-face meetings, an
increased confidence among women based on product quality, and a
reduction in the amount of time spent on assignments. While our findings
are not generalized to early undergraduate courses, the young women
we studied were at a critical junction in deciding whether to pursue
a career in IT upon their near-term graduation. Additionally, we
propose a model for future testing with both males and females that
connects these three factors with an increased interest in IT careers.","Voices of women in a software engineering course: Reflections on
collaboration",1
95,"Double Trouble: Mixing Qualitative and Quantitative Methods in the
Study of eXtreme Programmers
Despite sparse and sometimes contradictory evidence, eXtreme Programming
(XP) is currently growing in popularity as an alternative strategy
for developing software. This paper proposes a methodology for observational
studies of one of XPs twelve practices, pair programming, including
the analysis of verbalisations, interactions and artefacts in order
to improve our understanding of its cognitive implications. In addition,
a protocol for analysing pair programming behaviours is included
as a means of identifying the behavioural differences of those who
are more expert or novice at pair programming and understanding the
effect of pairing programmers of differing expertise. Initial results
from a recent study using this methodology are then presented.","Double Trouble: Mixing Qualitative and Quantitative Methods in the
Study of eXtreme Programmers",0
96,"Working in pairs as a means for design knowledge building: An Empirical
Study
Pair programming is increasingly attracting researchers' and practitioners'
attention. One of the claimed benefits of pair programming consists
of easing socialization among programmers, with the effect of transferring
tacit knowledge. Designing software systems requires a strong employment
of tacit knowledge, such as individual experience and skills. In
this paper, the authors, explore the hypothesis that working in pairs
can speed up and enforce the knowledge building process among designers.
We name ""pair designing"" the application of pair programming concepts
to the design stage. An experiment has been performed to test the
effect of pair designing on knowledge building. This paper discusses
preliminary results, which confirm the hypothesis of a positive effect
of working in pairs on the process of knowledge building.","Working in pairs as a means for design knowledge building: An Empirical
Study",1
97,"A discovery and analysis of influencing factors of pair programming
The exploration into the underlying psychosocial links of pair programming,
a new and unorthodox programming paradigm in which two programmers
share one keyboard and monitor during real-time programming sessions,
is undertaken. These complex psychosocial relationships, along with
cognitive process exchanges, ultimately mold the programming output
as well as determine the level of communication, satisfaction, confidence
and compatibility. Laying the framework for this research, a thorough
review of traditional and contemporary paradigms with a special focus
on their limitations and a list of current software development problems
are presented. Next, a detailed summary of pair programming and related
agile software paradigms, such as extreme programming, which lists
pair programming as one of its twelve principles, is given. From
earlier pair programming studies, a number of programming benefits
have been unveiled and these are listed and discussed. However, a
lack of formal studies pertaining to the psychosocial aspects of
pair programming exists. Given this void, a field survey is administered
to a group of professional programmers and a resulting list of influencing
factors on pair programming emerges. From the list, the most popular
factor, personality, and two other factors, communication and gender,
have been selected in order to study their impact on pair programming
product outcome and the level of communication, satisfaction, confidence
and compatibility. An experiment focusing on these factors is designed
and implemented. From the experimental findings, the personality
of the two partners in pair programming is found to have a significant
impact on the pair programming output. Also, it is discovered that
same gender pairs exhibited an unusually high level of communication,
satisfaction and compatibility between each other, especially among
female-female pairs. A detailed statistical experiment result based
on research hypotheses is reported.",A discovery and analysis of influencing factors of pair programming,1
98,"Piloting XP on four mission-critical projects
According to proponents, extreme programming creates focused, efficient
software development that heavily emphasizes customer involvement.
As software developers for mission-critical two-way radio systems
in Motorola's commercial, government, and industrial solutions sector,
we'd been hearing a lot about XP's benefits. Software development
teams constantly battle to increase productivity while maintaining
or improving quality . Four Motorola teams piloted extreme programming
to see if it would let them satisfy their customers' constantly changing
requirements while improving productivity.",Piloting XP on four mission-critical projects,0
99,"Improving Student Performance by Evaluating How Well Students Test
Their Own Programs
Students need to learn more software testing skills. This paper presents
an approach to teaching software testing in a way that will encourage
students to practice testing skills in many classes and give them
concrete feedback on their testing performance, without requiring
a new course, any new faculty resources, or a significant number
of lecture hours in each course where testing will be practiced.
The strategy is to give students basic exposure to test-driven development,
and then provide an automated tool that will assess student submissions
on-demand and provide feedback for improvement. This approach has
been demonstrated in an undergraduate programming languages course
using a prototype tool. The results have been positive, with students
expressing appreciation for the practical benefits of test-driven
development on programming assignments. Experimental analysis of
student programs shows a 28% reduction in defects per thousand lines
of code.","Improving Student Performance by Evaluating How Well Students Test
Their Own Programs",0
100,"Empirical evaluation of collaborative support for distributed pair
programming
Pair programming is an Extreme Programming (XP) practice where two
programmers work on a single computer to produce an artifact. Empirical
evaluations have provided evidence that this technique results in
higher quality code in half the time it would take an individual
programmer. Distributed pair programming could facilitate opportunistic
pair programming sessions with colleagues working in remote sites.
In this paper, we present the preliminary results of the empirical
evaluation of the COPPER collaborative editor, developed explicitly
to support pair programming. The evaluation was performed on three
different conditions: pairs working collocated on a single computer;
distributed pairs working in application sharing mode; and distributed
pairs using collaboration aware facilities. In all three cases the
subjects used the COPPER collaborative editor. The results support
our hypothesis that distributed pairs could find the same amount
of errors as their collocated counterparts. However, no evidence
was found that the pairs that used collaborative awareness services
had better code comprehension, as we had also hypothesized.","Empirical evaluation of collaborative support for distributed pair
programming",0
101,"A structured experiment of test-driven development
Test Driven Development (TDD) is a software development practice in
which unit test cases are incrementally written prior to code implementation.
We ran a set of structured experiments with 24 professional pair
programmers. One group developed a small Java program using TDD while
the other (control group), used a waterfall-like approach. Experimental
results, subject to external validity concerns, tend to indicate
that TDD programmers produce higher quality code because they passed
18% more functional black-box test cases. However, the TDD programmers
took 16% more time. Statistical analysis of the results showed that
a moderate statistical correlation existed between time spent and
the resulting quality. Lastly, the programmers in the control group
often did not write the required automated test cases after completing
their code. Hence it could be perceived that waterfall-like approaches
do not encourage adequate testing. This intuitive observation supports
the perception that TDD has the potential for increasing the level
of unit testing in the software industry.",A structured experiment of test-driven development,0
102,"Distributed pair programming: an empirical study
Pair programming provides many benefits, both to the programmers and
to the product that they develop. However, pair programming is limited
to those situations in which the developers can collocate, preventing
its benefits from being enjoyed by the widest possible audience.
A software tool that allowed the pair to work from separate locations
would address this limitation. This paper presents some initial results
from a distributed pair programming experiment in which students
in an introductory programming class used such a tool. Student perceptions
of distributed pair programming are also discussed.",Distributed pair programming: an empirical study,0
103,"Program quality with pair programming in CS1
Prior research on pair programming has found that compared to students
who work alone, students who pair have shown increased confidence
in their work, greater success in CSl, and greater retention in computer-related
majors. In these earlier studies, pairing and solo students were
not given the same programming assignments. This paper reports on
a study in which this factor was controlled by giving the same programming
assignments to pairing and solo students. We found that pairing students
were more likely to turn in working programs, and these programs
correctly implemented more required features. Our findings were mixed
when we looked at some standard complexity measures of programs.
An unexpected but significant finding was that pairing students were
more likely to submit solutions to their programming assignments.",Program quality with pair programming in CS1,1
104,"Enhancing CS Programming Lab Courses Using Collaborative Editors
This paper describes the pedagogical implications of the GREWPtool
(the Groupware Research in Education and the Workforce Project),
a same time different place groupware tool built to support synchronous,
collaborative coding among small to medium sized groups. GREWPtool
exploits the educational benefits of paired programming while extending
the model to allow students synchronous control of the same code.
This effectively drops the constraints of turn taking, and allows
for a richer interaction. The result was a powerful tool that can
be used to provide interactive lectures, structure classroom activity,
and facilitate paired programming during labs. In this paper we present
the design and use of GREWPtool with an emphasis on how it enhances
the classroom experience. In particular, we give a qualitative analysis
of how this tool has been used in six lab courses over the past two
years.",Enhancing CS Programming Lab Courses Using Collaborative Editors,0
105,"Examining Impact of Pair Programming on Female Students
There has been low representation of women in Computer Science. Numerous
studies have been conducted to identify the cause of this under-representation
and to provide suggestions to improve the situation. Still not much
progress in attracting women to computer science has been observed.
The research discussed in this paper was done during the pilot study
phase of a three-year project about women in information

technology field. During the first semester of this project, pair
programming was used in a junior/senior Software Engineering class
at North Carolina State University. The goal of this research is
to examine the effect of pair programming on female students. We
interviewed three female students and analyzed all female students’
project retrospective reports. Theoretical models were developed
to describe (a) the source of project

enjoyment, (b) context that influenced female students’ study habits,
and (c) the effectiveness of pair programming. The cause and effect
of each component of the theoretical models were identified and are
illustrated with narrative data.",Examining Impact of Pair Programming on Female Students,1
106,"Sangam - A Distributed Pair Programming Plug-in for Eclipse
In pair programming, two programmers traditionally work side-by-side
at one computer. However, in globally distributed organizations,
long-distance collaboration is frequently necessary. Sangam is an
Eclipse plug-in that allows Eclipse users in different locations
to share a workspace so that they may work as if they were using
the same computer. In this paper, we discuss the Sangam plug-in,
and our experience developing it via distributed and collocated pair
programming.",Sangam - A Distributed Pair Programming Plug-in for Eclipse,0
107,"Work in progress-unexpected student outcome from collaborative agile
software development practices and paired programming in a software
engineering course
There has been low representation of women in computer science. This
paper describes the initial findings of a three-year research project
about women in the field of information technology. The goal of this
research is to examine the effect of pair programming and agile software
development on students. During the first semester of this project,
pair programming was used in a junior/senior software engineering
class at North Carolina State University. In this paper, we share
the grounded theory analysis of three interviews and thirteen project
retrospective essays of the female students. Theoretical models were
developed to describe: (a) the factors of students' enjoyment in
a software design course that employs agile software methods, (b)
context that influenced students' study habits, and (c) the effectiveness
of pair programming and agile methods. Initial findings indicate
that pair programming is an effective practice for the female students,
but it also brings new challenges for the instructors.","Work in progress-unexpected student outcome from collaborative agile
software development practices and paired programming in a software
engineering course",0
108,"On understanding compatibility of student pair programmers
In recent years, educators have increasingly used pair programming
in their computer science courses. Pair programming has been shown
to be beneficial for both the teaching staff and the students in
the courses. Occasionally, though, students are not compatible with
their partners. An extensive study was done at the North Carolina
State University to provide guidance on forming student pairs to
improve the chances that pairs will be compatible and have a productive
work relationship. We examined compatibility among freshman, advanced
undergraduate, and graduate students. We have found that the students'
perception of their partner's skill level has a significant influence
on their compatibility. Graduate students work well with partners
of similar actual skill level. Freshmen seem to work better with
partners with different Myers Briggs personality type. Students'
self-esteem does not appear to be a major contributor to pair compatibility.",On understanding compatibility of student pair programmers,1
109,"The effects of pair programming on learning efficiency in short programming
assignments
Pair programming is one of the important practices of a lightweight
development methodology namely eXtreme Programming (XP). It emphasizes
the practice of two persons working together at a single computer
terminal, to design, code and test computer programs. The effects
of pair programming on software development in industrial organizations
were studied and it was found that pair programming increases the
productivity by 15%. This evidence created an interest in amongst
community of computer science educators to apply pair programming
in educational settings. We have conducted an experiment with the
students of computer science courses to compare the learning efficiency
of students when they adopt pair programming with that of students
using traditional method to do laboratory exercises of short duration.
The learning efficiency was measured by evaluating design documents,
completion time, and marks obtained in a written test that was conducted
after every exercise. Our research confirms that the adoption of
pair programming improves the design ability, reduces time taken
to do a laboratory exercise and increases the knowledge and programming
skill.","The effects of pair programming on learning efficiency in short programming
assignments",1
110,"An exploratory study on the effects of pair programming
This paper reports results from an exploratory study investigating
the practice of pair programming using a student project conducted
over a period of nine weeks. We collected qualitative data on the
use and effectiveness of pair programming. We found that depending
on the pairing combination used, the effects of pair programming
can be both positive and negative.",An exploratory study on the effects of pair programming,1
111,"Value creation and capture: A model of the software development process
Understanding software development dynamics can help managers and
project team members maximize value delivery. Using functions and
parameters applied in a spreadsheet, this process model facilitates
this understanding by examining value creation and value capture
in the presence of uncertainty. Items to explore include project
staffing, optimal release dates, and potential impacts of process
improvements such as pair programming.",Value creation and capture: A model of the software development process,0
112,"Subclassing XP: breaking its rules the right way
Extreme programming encourages adoption of all of its practices. In
practice many projects drop practices. What remains can be an incomplete
methodology, which is dangerous. This problem can be overcome by
replacing each removed dropped practice with a compensating practice
tailored to the circumstances of the project - effectively subclassing
XP. This experience report recounts the experiences of subclassing
of XP at Wotif.com, where pair programming was replaced with ""pairing""
and refactoring was replaced with ""team refactoring"" .",Subclassing XP: breaking its rules the right way,0
113,"Redesigning Introductory Computer Programming with HTML, javascript
and Java
In this paper we describe our experience in the design and teaching
of a new evolutionary introductory programming course in a new Distributed
Computing and Communications Systems Technology program at the University
of Guelph-Humber. This course is evolutionary and innovative because
it integrates the use of HTML, JavaScript, and Java in a one-semester
introductory computer programming course. This is a marked departure
from the use of a single conventional, general purpose, programming
language such as Java or C++. The course is designed with two goals
in mind: to improve the students experience in their first computer
programming; and to achieve retention in the new program.","Redesigning Introductory Computer Programming with HTML, javascript
and Java",0
114,"A cognitive model for solo programming and pair programming
As eXtreme programming (XP) has grown in popularity in both academia
and industry, pair programming, two programmers collaborating on
design, coding and testing, has become a controversial focus of interest.
Many researchers and practitioners remain skeptical of claims for
the productivity of pair programming. Three controlled experiments,
by Nosek, William, and Nawrocki, all reported statistical productivity
measurements, but the results were inconsistent and the differences
among the results could not be explained because there exists no
theoretical framework to articulate pair programming. This paper
proposes a cognitive model that describes the programming mechanism
and this in turn can be used to explain why and when a pair may outperform
two individuals. The model helps explain discrepancies in the results
of the above-mentioned experiments. To show how the proposed model
can be applied, a psychological experiment was conducted in which
twenty-two programmers who were informed only of the experiment and
the results of Nosek, and of the descriptions of Williams and Nawrocki,
were able to use our model to predict the possible outcomes of the
experiments of Williams and Nawrocki .",A cognitive model for solo programming and pair programming,0
115,"Introducing agile methods: three years of experience
The paper summarizes three years of experience of introducing agile
practices in academic environments. The perceptions of students from
four different academic programs (Diploma, Applied Bachelor's, Bachelor's
and Master's) from two institutions are analyzed. Specifically, pair
programming, test-driven development and project planning using the
planning game were studied in detail. Overwhelmingly, students' experiences
are positive and their opinions indicate the preference to continue
to use agile practices if allowed. No major problems with agile techniques
appeared in the evaluation contexts and benefits in these contexts
have been seen.",Introducing agile methods: three years of experience,0
116,"Extreme dynamics: towards a system dynamics model of the extreme
programming software development process
We present a system dynamics model of two key practices of the extreme
programming paradigm for software development: pair programming and
pair switching, and task switching. The performance of the programming
process obtained through this model is compared with the performance
of the model that describes a traditional approach to programming
in which programmers work individually. The effects of various parameters
are highlighted, and the conditions under which one approach appears
to give better results than the other are outlined. In particular,
XP appears to have an advantage over the traditional approach when
pair switches are not too frequent, and when the personalities of
the members of the pair are not different.","Extreme dynamics: towards a system dynamics model of the extreme
programming software development process",0
117,"JeCo, a collaborative learning tool for programming
Classroom pair-programming activities have been found to support novice
student's learning during basic programming courses. However, there
are very few tools that could support pair or group programming in
distance education courses. Here, we explain the new concept of collaborative
program visualization and present a tool to support it, called JeCo,
that can help students work together on a platform that supports
both collaborative authoring and program visualization.","JeCo, a collaborative learning tool for programming",0
118,"Are reviews an alternative to pair programming?
From the first presentation of extreme programming on, pair programming
has attracted a wide range of programmers to work together in front
of one display. The proposed advantages of pair programming are a
faster development cycle and code with higher quality. However, the
nearly doubled personnel cost when compared to single developers
seems to outweigh these advantages. Instead of showing the superiority
of pair programming, we seek an alternative. Can a single developer
be assisted by an already known technique with which he produces
the quality of pairs with only a fraction of the cost? The answer
with some restrictions is: yes, he can. Reviews are a reasonable
candidate with respect to code quality and cost.",Are reviews an alternative to pair programming?,1
119,"An empirical study about the feelgood factor in pair programming
Why are programmer pairs more productive than single developers? Using
empirical data from two controlled experiments, we find that pair
performance is uncorrelated with programming experience, but shows
a significant correlation with how comfortably the developers feel
with pair programming during the session (the 'feelgood"" factor).",An empirical study about the feelgood factor in pair programming,1
120,"On the impact of warmup phases on the economics of pair programming
Pair programmers need a ""warmup phase"" before the pair can work at
full speed. We study how large the impact of the lower productivity
during warmup is on the business value of a pair programming project.
To this end, we extend our net present value model for pair programming
to explicitly include a learning interval for pairs. We then carry
out a simulation study where we vary the shape of the learning curve,
the length of the learning interval, the final productivity level
of the pairs, the market pressure, and the size of the workforce.
Our simulations show that the cost of the warmup phase is small compared
to the project value. This result suggests that the learning overhead
is not an obstacle to introducing and using pair programming.",On the impact of warmup phases on the economics of pair programming,0
121,"Modelling the Impact of a Learning Phase on the Business Value of
a Pair Programming Project
Pair programmers need a ""warmup phase"" before the pair can work at
full speed. The length of the learning interval varies, depending
on how experienced the developers are with pair programming and how
familiar they are with each other. We study how large the impact
of the lower pair productivity during warmup is on the business value
of the pair programming project. To this end, we extend our net present
value model for pair programming to explicitly include a learning
interval for pairs. We then carry out a simulation study where we
vary the shape of the learning curve, the length of the learning
interval, the final productivity level of the pairs, the market pressure,
and the size of the workforce. Our simulations show that the cost
of the warmup phase is reasonably small compared to the project value,
but nonetheless must be taken into account when estimating the project.
Our results also suggest that the learning overhead is not an obstacle
to introducing and using pair programming in a real environment.","Modelling the Impact of a Learning Phase on the Business Value of
a Pair Programming Project",0
122,"A field study of developer pairs: productivity impacts and implications
Pair programming purportedly delivers quality code with little productivity
loss. The authors' field study, outside the pair programming environment,
shows that two-person teams working independently are more productive
than those working concurrently; agile methods may overcome inherent
productivity losses of concurrent development. This research contrasts
starkly with our field study findings. We decided to reexamine our
earlier productivity data from teams of two and ask: Would our previous
findings of concurrent-work productivity loss be reversed if we look
only at programming pairs rather than teams of all sizes? If so,
we could conclude that pairs are naturally more productive than larger
teams, regardless of the collaborative process. If not, we could
conclude that the collaboration mechanisms prescribed in pair programming
might overcome a natural loss of productivity from concurrent work.
We offer these findings and their implications as a benchmark against
which we might measure the potential of pair programming practices.",A field study of developer pairs: productivity impacts and implications,0
123,"Model based testing in incremental system development
The spiraling nature of evolutionary software development processes
produces executable parts of the system at the end of each loop.
It is argued that these parts should consist not only of programming
language code, but of executable graphical system models. As a main
benefit of the use of more abstract, yet formal, modeling languages,
a method for model based test sequence generation for reactive systems
on the grounds of Constraint Logic Programming as well as its implementation
in the CASE tool AF is presented.",Model based testing in incremental system development,0
124,"Analyzing pair-programmer's satisfaction with the method, the result,
and the partner
We give an overview of a programmer satisfaction survey in pair-programming
experiment. The experiment took place at Institute of Computer Science,
University of Tartu (UT), Estonia. We include the problem statement,
description of the questionnaire, and the survey results.","Analyzing pair-programmer's satisfaction with the method, the result,
and the partner",0
125,"A case study in the use of extreme programming in an academic environment
A group of graduate students working in a lab in a university have
more distractions than a typical software development group in industry.
With more distractions and fewer hours on site does it still make
sense to use extreme programming (XP) in the development of software?
Here we discuss our experience using XP in an academic environment
in which the members of the development group have different schedules
and other projects. We found that pair programming was an efficient
and effective way to learn and share knowledge, and that unit testing
and just-in-time design helped us get to an early, though scaled
down release. Our interpretation of pair programming felt limited
and awkward at first until we realized that we could and should spend
time independently learning and researching the tasks in addition
to the work we do in pairs.",A case study in the use of extreme programming in an academic environment,0
126,"On Pair Rotation in the Computer Science Course
In a course environment, pairing a student with one partner for the
entire semester is beneficial, but may not be optimal. The authors
conducted a study in two undergraduate levelcourses to observe the
advantages and disadvantages of pair rotation whereby a student pairs
with several different students throughout the semester. This paper
summarizes teaching staff and student perceptions on the viability
of pair rotation. Teachers find pair rotation valuable because the
teaching staff can obtain multiple peer evaluations on each student
and because dysfunctional pairs are regularly disbanded. However,
pair rotation adds to the burden of assigning pairs multiple times
per semester. The majority of students in the study perceived pair
rotation to be a desirable approach. Additionally, most students
considered peer evaluation to be an effective means of providing
feedback to teaching staff. However, they did not significantly believe
that peer evaluation was an effective means for motivating students.",On Pair Rotation in the Computer Science Course,1
127,"Support for distributed pair programming in the transparent video
facetop
The transparent video facetop is a user interface concept that supports
not only single-user interactions with a PC, but also close pair
collaborations, such as that found in collaborative Web browsing,
remote medicine, and in distributed pair programming. In this paper
we discuss the use of a video-based UI called the facetop (Stotts
et al., 2004) for solving several problems reported to us by teams
doing distributed pair programming. Specifically, the facetop allows
a distributed pair to recapture some the facial expressions and face-to-face
communications contact lost in earlier distributed sessions. It also
allows members of a distributed pair to point conveniently, quickly,
and naturally to their shared work, in the same manner (manually)
that they do when seated side-by-side. Our results enhance the ability
of organizations to do effective XP-style agile development with
distributed teams.","Support for distributed pair programming in the transparent video
facetop",0
128,"Rate-based software reliability process simulation
Rate-based software reliability process simulation treats software
development processes as stochastic processes controlled by rate
functions. It's the natural expansion of the traditional analytical
software reliability models. This simulation technique can be used
to predict the software reliability in the early stages of development
process and simulate many development processes with different characteristics
by constructing corresponding rate functions. This paper explains
the mathematic founding of the rate-based software reliability process
simulation and presents realization approaches of single event process
simulation and multi-event process simulation. This paper also presents
an application which has simulated the influence of two development
methods, competitive design and pair programming, to the software
reliability by using Softrel.",Rate-based software reliability process simulation,0
129,"Coupling pair programming and writing: learning about students' perceptions
and processes
Pair programming has been successful in many introductory computer
science courses. Its success has manifested in increased retention
rates, better performance on programming tasks, increased confidence,
and decreased frustration. This paper highlights experiences using
pair programming coupled with individual written reports in a large,
introductory computer science course. Through analysis of survey
data and written reports, our study shows that students perceive
benefits in pair programming, such as those documented earlier (social
structure, peer help, less frustration, reduced workload). Regarding
the written reports, students cited benefits such as a chance to
summarize their project, to reflect on the code, and to use new vocabulary.
We discuss what we learn about students' processes, their challenges,
and the resources they use for supporting their learning.","Coupling pair programming and writing: learning about students' perceptions
and processes",1
130,"Extreme programming: Pair-programmers, team players or future leaders?
This paper will establish that a productive working relationship can
be enhanced in an Extreme Programming (XP) Pair-Programming Team
if Team members here were to develop and improve their own individual
Emotional Intelligence (EI) persona. A conceptual model (ARMES) was
developed for personal traits identified for Pair-Programmers. The
validity of this ARMES model for Pair-Programming was tested against
two (previously published) XP Case Studies. Finally, implications
of the conclusions were discussed along with suggested areas of future
research.","Extreme programming: Pair-programmers, team players or future leaders?",0
131,"Pair-Programming Helps Female Computer Science Students
Pair-programming has been found to be very beneficial in educational
settings. Students who pair in their introductory programming course
are more confident, have greater course completion and pass rates,
and are more likely to persist in computer-related majors. Although
pairing helps all students, we believe that it is particularly beneficial
for women because it addresses several significant factors that limit
women's participation in computer science. We provide reasons for
our belief that pair-programming helps women persist in these majors.
We also repeat, with special emphasis on the impact on women, some
details published elsewhere regarding our experiments on pair-programming
with college and university students. Additionally, we provide new
data that supports our original findings.",Pair-Programming Helps Female Computer Science Students,0
132,"The impact of using pair programming on system evolution a simulation-based
study
In this paper we investigate the impact of pair programming on the
long term evolution of software systems. We use system dynamics to
build simulation models which predict the trend in system growth
with and without pair programming. Initial results suggest that the
extra effort needed for two people to code together may generate
sufficient benefit to justify pair programming.","The impact of using pair programming on system evolution a simulation-based
study",0
133,"An initial Exploration of the relationship between Pair Programming
and Brooks' Law
Through his law, ""adding manpower to a late software project makes
it later,'' Brooks asserts that the assimilation, training, and intercommunication
costs of adding new team members outweigh the associated team productivity
gain in the short term. Anecdotes suggest that adding manpower to
a late project yields productivity gains to the team more quickly
if the team employs the pair programming technique when compared
to teams where new team members work alone. We utilize a system dynamics
model which demonstrates support of these observations. Parameter
values for the model were obtained via a small-scale, nonprobabilistic,
convenience survey. Our initial findings suggest that managers should
incorporate the pair programming practice when growing their team.","An initial Exploration of the relationship between Pair Programming
and Brooks' Law",0
134,"Work in progress - effect of instructional design and pair programming
on student performance in an introductory programming course
California State University Monterey Bay (CSUMB) uses an outcomes-based
delivery philosophy and focuses on measurable student learning. Because
of the required outcome it was determined that the students needed
more scaffolding or ""metacognitive support"" than is typically afforded
in the introductory programming courses. The students were simply
not capable of making the jump from simple programming concepts to
being able to deliver a satisfactory completed portfolio piece. This
paper reports on a study that investigated use of pair programming
as a delivery methodology for an introductory Java programming course.","Work in progress - effect of instructional design and pair programming
on student performance in an introductory programming course",1
135,"Evaluation of effects of pair work on quality of designs
Quality is a key issue in the development of software products. Although
the literature acknowledges the importance of the design phase of
software lifecycle and the effects of the design process and intermediate
products on the final product, little progress has been achieved
in addressing the quality of designs. This is partly due to difficulties
associated in defining quality attributes with precision and measurement
of the many different types and styles of design products, as well
as problems with assessing the methodologies utilized in the design
process. In this research we report on an empirical investigation
that we conducted to examine and evaluate quality attributes of design
products created through a process of pair-design and solo-design.
The process of pair-design methodology involves pair programming
principles where two people work together and periodically switch
between the roles of driver and navigator. The evaluation of the
quality of design products was based on ISO/IEC 9126 standards. Our
results show some mixed findings about the effects of pair work on
the quality of design products.",Evaluation of effects of pair work on quality of designs,1
136,"A framework for understanding the factors influencing pair programming
success
Pair programming is one of the more controversial aspects of several
Agile system development methods, in particular eXtreme Programming
(XP). Various studies have assessed factors that either drive the
success or suggest advantages (and disadvantages) of pair programming.
In this exploratory study the literature on pair programming is examined
and factors distilled. These factors are then compared and contrasted
with those discovered in our recent Delphi study of pair programming.
Gallis et al. (2003) have proposed an initial framework aimed at
providing a comprehensive identification of the major factors impacting
team programming situations including pair programming. However,
this study demonstrates that the framework should be extended to
include an additional category of factors that relate to organizational
matters. These factors will be further refined, and used to develop
and empirically evaluate a conceptual model of pair programming (success).","A framework for understanding the factors influencing pair programming
success",0
137,"An empirical study of system design instability metric and design
evolution in an agile software process
Software project tracking and project plan adjustment are two important
software engineering activities. The class growth shows the design
evolution of the software. The System Design Instability (SDI) metric
indicates the progress of an object-oriented (OO) project once the
project is set in motion. The SDI metric provides information on
project evolution to project managers for possible adjustment to
the project plan. The objectives of this paper are to test if the
System Design Instability metric can be used to estimate and re-plan
software projects in an XP-like agile process and study system design
evolution in the Agile software process. We present an empirical
study of the class growth and the SDI metric in two OO systems, developed
using an agile process similar to Extreme Programming (XP). We analyzed
the system evolutionary data collected on a daily basis from the
two systems. We concluded that: the systems' class growth follows
observable trends, the SDI metric can indicate project progress with
certain trends, and the SDI metric is correlated with XP activities.
In both of the analyzed systems, we observed two consistent jumps
in the SDI metric values in early and late development phases. Part
of the results agrees with a previous empirical study in another
environment.","An empirical study of system design instability metric and design
evolution in an agile software process",0
138,"Balancing depth and breadth in the data structure course
The data structures (CS 103) course in a computer science curriculum
is the bridge between the CS 101/CS 102 sequence, which introduces
the fundamentals of programming, and the algorithms course, which
emphasizes rigorous analysis. The challenge for CS 103 instructors
is to balance the breadth and depth of coverage of data structures
material: pacing the assignment of projects with lectures so that
all of the fundamental data structure topics are covered, and assigning
large-scale projects to students without overwhelming them with time
and complexity requirements. To address this challenge, this paper
proposes an approach that combines pair programming, weekly assigned
large-scale student-centered projects, web-based portfolios, a multiple-intelligence
focus for material presentation [3], and process log (journal) entries
submitted in conjunction with assignments. The approach is evaluated
with an analysis of student questionnaires and an evaluation of written
responses from students' process-logs. This paper documents the research
and suggests directions for further study.",Balancing depth and breadth in the data structure course,0
139,"Cooperative learning techniques in CS1: Design and Experimental Evaluation
A set of cooperative learning exercises were designed for use in a
Java-based CS1 course. The exercises used specific roles to focus
students' attention on key concepts of the Java

language, and on key mental processes of programming and problem solving.
A controlled experiment was conducted to evaluate the effectiveness
of this approach. The results show that the cooperative learning
experience had a significant positive effect on student performance,
and may have been of special benefit to women and minority students.",Cooperative learning techniques in CS1: Design and Experimental Evaluation,0
140,"The Impact of educational background on design knowledge sharing
during pair programming: An empirical study
The management of knowledge in software processes is becoming a challenging
concern for researchers and practitioners, Explicit knowledge can
be formalized in many kinds of documents and rules, and consequently
transferred in a number of manners. On the contrary, tacit knowledge
cannot be formalized, because it is mainly retained in personal cognitive
models and consists of individual capabilities of dealing with problems.
The design of software systems requires a consistent deployment of
tacit knowledge, and pair programming has shown great promises for
helping to share knowledge between programmers. It is a common experience
that programmers come not only from computer science and engineering
curricula, but also from other education degrees, such as mathematics,
natural sciences, and social sciences. In this case they attend proper
specialist post graduation courses. We have executed an experiment
in order to verify the relationship between educational background
of pair's components and knowledge sharing throughout working in
pairs while designing software systems.","The Impact of educational background on design knowledge sharing
during pair programming: An empirical study",0
141,"Pair designing as practice for enforcing and diffusing design knowledge
Evolving software's design requires that the members of the team acquire
a deep and complete knowledge of the domain, the architectural components,
and their integration. Such information is scarcely addressed within
the design documentation and it is not trivial to derive it. A strategy
for enforcing the consciousness of such hidden aspects of software's
design is needed. One of the expected benefits of pair programming
is fostering (tacit) knowledge building between the components of
the pair and fastening its diffusion within the project's team. We
have applied the paradigm of pair programming to the design phase
and we have named it 'pair designing'. We have realized an experiment
and a replica in order to understand if pair designing can be used
as an effective means for diffusing and enforcing the design knowledge
while evolving the system's design. The results suggest that pair
designing could be a suitable means to disseminate and enforce design
knowledge. Copyright (c) 2005 John Wiley & Sons, Ltd.",Pair designing as practice for enforcing and diffusing design knowledge,1
142,"Test-first pair-programming tutorial
This hands-on tutorial covers two practices of Extreme Programming
(XP): test-first programming and test-driven development. It focuses
on the deeper aspects of these practices, including how they affect
productivity.",Test-first pair-programming tutorial,0
143,"Information technology fluency for middle school girls
To participate in the changing world of technology, students must
develop information technology (IT) fluency, rather than simply IT
literacy. Fluency includes three kinds of knowledge: skills, concepts,
and capabilities. The acquisition of these kinds of knowledge is
more likely to happen in the context of project-based work. Because
of the continued majority of males in IT, it is essential that efforts
are made to increase the participation of girls. In this paper, we
describe an after school program for middle school girls that aims
to develop IT fluency by teaching them to make computer games. We
present data from their games that show how participants have made
substantial strides toward information technology fluency. The findings
suggest that most girls developed skills in graphics, use of a database,
and the use of the internet. They developed capabilities such as
sustained reasoning and managing complexity. And they developed concepts
such as algorithmic thinking and programming and information organization.",Information technology fluency for middle school girls,0
144,"Confirming the influence of educational background in pair-design
knowledge through experiments
The sharing of tacit knowledge is a strategic factor for the success
of software process, from a number of perspectives: training, project
assimilation, and reducing noise in knowledge transfer. Pair programming
is supposed to be a practice suitable for this purpose. Unfortunately,
the building of tacit knowledge is determined by factors that are
difficult to isolate and capture because they concern personal attitude
and capability. Thus, we have focused on the possible causes forming
the individual ability, that can be isolated and studied, such as
the individual education background. We have applied the practice
of working in pairs to the design phase. We have made an experiment
and a replica in academic environment, in order to understand the
relationship between the building of knowledge through the practice
and the individual background. In this paper we discuss the replica
and compare the results with the first experiment’s ones.","Confirming the influence of educational background in pair-design
knowledge through experiments",1
145,"Empirical study on the productivity of the pair programming
Many authors complain the lack of empirical studies which assess the
benefits and the drawbacks of agile practices. Particularly, pair
programming rises an interesting question for managers: does pair
programming mean to pay two developers in the place of one? We realized
an experiment to compare the productivity of a developer when performing
pair programming and when working as solo programmer. We obtained
empirical evidence that pair programming decreases the effort of
the single programmer.",Empirical study on the productivity of the pair programming,1
146,"Activity Patterns of Pair Programming
This paper reports results from an exploratory study investigating
the activity patterns of pair programming using a student project
conducted over a period of nine weeks. We found that pair programming
engaged in activities that lead to more deeper-level thinking which
may enable people to formulate a more complete mental model of the
task. We also compared the activity patterns between different pair
combinations. We found that there are differences in the patterns
among different pair combinations.",Activity Patterns of Pair Programming,0
147,"Factors affecting the perceived effectiveness of pair programming
in higher education
This paper reports the findings of a study conducted on postgraduate
students of an Object Oriented Programming (OOP) course in which
pair programming was applied as an educational technique. This study
addressed the question Why is pair programming sometimes ineffective?
The focus of the study was on exploring the factors that may affect
the success of pair programming. We employed a combination of data
gathering techniques and triangulated them to analyze the data. We
observed, recorded and interviewed students who pair programmed.
They also completed questionnaires. There was evidence that matching
by skill level and the task in hand are the main factors in the success
of a pair programming session.","Factors affecting the perceived effectiveness of pair programming
in higher education",1
148,"Collaboration Support for Novice Team Programming
Learning computer programming in a modern university course is rarely
an individual activity; however, IDEs used in introductory programming
classes do not support collaboration at a level appropriate for novices.
The goal of our research is to make it easier for first-year students
to experience working in a team in their programming assignments.
Based on our previous work developing and evaluating IDEs for novice
programmers, we have identified two main areas of required functionality:
1) features for code sharing and coordination; and 2) features to
support communication. We have extended an existing teaching-oriented
integrated development environment (called Gild) with features to
support code sharing and coordination. We report on a preliminary
study in which pairs of students used a prototype of our collaborative
IDE to work on a programming assignment. The goals of this study
were to evaluate the effectiveness and usability of the new features
and to determine requirements for future communication support.",Collaboration Support for Novice Team Programming,0
149,"Agile modeling, agile software development, and extreme programming:
the state of research
While there are many claims for the successful use of extreme programming
(XP) and agile modeling (AM), and the proponents can often be vocal
in the extreme regarding their supposed benefits, research evidence
supporting proponents' claims is somewhat lacking. Currently, the
only research appearing to investigate the phenomena consists of
two prominent streams. A small number of case studies and experience
reports that generally promote the success of XP in various development
environments, and a well-established stream of research into pair
programming has generated results that in part support the idea of
XP. Research into AM appears to be even more sparse than that for
XP. Case studies, comparative analyses, and experience reports comprise
the majority of the research in the area, while very few empirical
research efforts have been conducted. This article reviews the state
of research in XP and AM, and recommends areas that could benefit
from further study. Since nearly all empirical XP research relates
to pair programming, a closer look into the unstudied XP core practices
would be beneficial, although interaction between related core practice
areas could confound such efforts. It might also be possible to group
related core XP concepts and study the groups individually. Finally,
there are those who claim that XP and AM, or even agility in general,
are really nothing more than a repackaging of old concepts. This
claim needs to be investigated .","Agile modeling, agile software development, and extreme programming:
the state of research",0
150,"A study of the use of agile methods within Intel
This study investigated the use of the agile methods, extreme programming
(XP) and Serum, at the Intel Network Processor Division engineering
team based in Shannon, Ireland, over a three-year-period The study
is noteworthy as it is based on real industrial software projects
involving experienced software engineers, with continuous reflection
and monitoring of the application of these approaches. It provides
evidence that agile methods are far from anti method; rather, they
require disciplined application and careful customization to the
particular needs of the development context. The study also shows
how XP and Serum can complement each other to provide a comprehensive
agile development method, with XP providing support for technical
aspects and Serum providing support for project planning and tracking.
The manner in which XP and Serum have been customized to suit the
needs of the development environment at Intel Shannon is described,
as are the lessons learned. The XP practices that were applied did
lead to significant benefits, with pair-programming leading to reductions
in code defect density, of a factor of seven, and one project actually
achieving zero defect density However, some observed limitations
of pair-programming are described. Intel Shannon also found that
not all XP practices were applicable in their context. Thus. the
study suggests that, contrary to suggestions that XP is not divisible
or individually selectable, a la carte selection and tailoring of
XP practices can work very well. In the case of Serum, some local
customization has led to a very committed adoption by developers
themselves, in contrast to many development methods whose use is
decreed mandatory by management. The success of Scrum is significant.
Projects of sLX-month and one-year duration have been delivered ahead
of schedule, which bodes well for future ability to accurately plan
development projects, a black art in software development up to now.",A study of the use of agile methods within Intel,0
151,"Engineering-based processes and agile methodologies for software
development: a comparative case study
The emergence of various software development methodologies raises
the need to evaluate and compare their efficiencies. One way of performing
such a comparison is to have different teams apply different process
models in the implementation of multiple versions of common specifications.
This study defines a new cognitive activity classification scheme
which has been used to record the effort expended by six student
teams producing parallel implementations of the same software requirements
specifications. Three of the teams used a process based on the Unified
Process for Education (UPEDU), a teaching-oriented process derived
from the Rational Unified Process. The other three teams used a process
built around the principles of the Extreme Programming (XP) methodology.
Important variations in effort at the cognitive activity level between
teams shows that the classification could scarcely be used without
categorization at a higher level. However, the relative importance
of a category of activities aimed at defining ""active"" behaviour
was shown to be almost constant for all teams involved, possibly
showing a fundamental behaviour pattern. As secondary observations,
aggregate variations by process model tend to be small and limited
to a few activities, and coding-related activities dominate the effort
distribution for all the teams.","Engineering-based processes and agile methodologies for software
development: a comparative case study",0
152,"Student performance in CS1 with distributed pair programming
Pair programming has been shown to provide many pedagogical benefits,
particularly for students who are learning to program. One drawback
with pair programming is its collocation requirement, which makes
it difficult for some students to enjoy these benefits. We report
on an experiment with a tool that allows students to pair program
from separate locations. Our results indicate that students who experience
the increased flexibility of distributed pairing perform as well
in their introductory programming course as students who have to
physically meet in order to pair. These students are also as confident
as the collocated students. We also confirm earlier results reported
by others that pair programming results in greater student confidence
and increased student performance.",Student performance in CS1 with distributed pair programming,0
153,"Teaching extreme programming to large groups of students
We find the extreme programming methodology highly suitable for introducing
undergraduate students to software engineering. To be able to apply
this methodology at a reasonable teaching cost for large student
groups, we have developed two courses that work in tandem: a team
programming course taken by more than 100 students, and a coaching
course taken by around 25 students. In this paper we describe our
view of how extreme programming fits into the software engineering
curriculum, our approach to teaching it, and our experiences, based
on two years of running these courses. Particularly important aspects
of our set up include team coaching (by older students), fixed working
hours, and colocation during development. Our experiences so far
are very positive, and we see that students get a good basic understanding
of the important concepts in software engineering, rooted in their
own practical experience.",Teaching extreme programming to large groups of students,0
154,"A multiple case study on the impact of pair programming on product
quality
Pair programming is a programming technique in which two programmers
use one computer to work together on the same task. There is an ongoing
debate over the value of pair programming in software development.
The current body of knowledge in this area is scattered and unorganized.
Review shows that most of the results have been obtained from experimental
studies in university settings. Few, if any, empirical studies exist,
where pair programming has been systematically under scrutiny in
real software development projects. Thus, its proposed benefits remain
currently without solid empirical evidence. This paper reports results
from four software development projects where the impact of pair
programming on software product quality was studied. Our empirical
findings appear to offer contrasting results regarding some of the
claimed benefits of pair programming. They indicate that pair programming
may not necessarily provide as extensive quality benefits as suggested
in literature, and on the other hand, does not result in consistently
superior productivity when compared to solo programming.","A multiple case study on the impact of pair programming on product
quality",0
155,"Teaching Computer Science Courses Using Extreme Programming (XP)
Methodology
This paper describes the extreme programming (XP) methodology and
its effectiveness in incorporating its practices in computer science
curriculum. We explored several merits and demerits of this incorporation
based on our experiences and observations which are supported by
other researchers. In this study we considered those courses of computer
science that involve the processes of software development and analysis.
It has been found that XP in full practice is vulnerable against
a single course of software engineering, so some of its practices
should be incorporated in the first semester of computer science
curriculum and rest should be incorporated in later years. We start
our work from the introductory course in computer science where we
first implement the concept of pair programming and then implement
other practices. Some suggestions are included in this work that
can be helpful in implementing this methodology.","Teaching Computer Science Courses Using Extreme Programming (XP)
Methodology",0
156,"Test-driven development: Concepts, taxonomy, and future direction
The test-driven development strategy requires writing automated tests
prior to developing functional code in small, rapid iterations. XP
is an agile method that develops object-oriented software in very
short iterations with little upfront design. Although not originally
given this name, TDD was described as an integral XP practice necessary
for analysis, design, and testing that also enables design through
refactoring, collective ownership, continuous integration, and programmer
courage. Along with pair programming and refactoring, TDD has received
considerable individual attention since XP's introduction. Developers
have created tools specifically to support TDD across a range of
languages and have written numerous books explaining how to apply
TDD concepts. Researchers have begun to examine TDD's effects on
defect reduction and quality improvements in academic and professional
practitioner environments, and educators have started to examine
how to integrate TDD into computer science and software engineering
pedagogy.","Test-driven development: Concepts, taxonomy, and future direction",0
157,"Towards Increasing the Compatibility of Student Pair Programmers
As pair programming is used widely in software engineering education,
instructors may wish to proactively form pairs to increase the likelihood
of compatible pairs. A study involving 361 software engineering students
was carried out at North Carolina State University to understand
and predict pair compatibility. We have found that students are compatible
with partners whom they perceive of similar skill, although instructors
cannot proactively manage this perception. Pairing of two minority
students is more likely and mixed gender pairs are less likely to
be compatible. Additionally, pairing of students with similar actual
skill level as measured by midterm grades in class, GPA, and SAT/GRE
scores also likely results in compatible pairs. Our research addresses
the following challenges faced by instructors in software engineering:
1) organizational concern in pairing of students; 2) increasing the
retention rates of female and minority students in classes; and 3)
proactively forming mutually-compatible pairs.",Towards Increasing the Compatibility of Student Pair Programmers,1
158,"Pair programming: An alternative to reviews and inspections?
The benefits of pair programming in relation to reviews and inspections
applied to software development are discussed. Pair programming is
defined as a practice in which two programmers sit side by side at
one computer for developing software. Pair programming supports a
higher focus on the task as a result of the peer pressure that comes
along with it. Program code knowledge is distributed among two or
more developers as soon as the code is typed. It is suggested that
traditional QA processes, such as inspections and reviews, must be
adapted to accommodate today's need for distributed development,
low overhead, electronic processing, and storage of process data
and artifacts.",Pair programming: An alternative to reviews and inspections?,0
159,"How to steer an embedded software project: tactics for selecting
the software process model
Modern large new product developments (NPD) are typically characterized
by many uncertainties and frequent changes. Often the embedded software
development projects working on such products face many problems
compared to traditional, placid project environments. One of the
major project management decisions is then the selection of the project's
software process model. An appropriate process model helps coping
with the challenges, and prevents many potential project problems.
On the other hand, an unsuitable process choice causes additional
problems. This paper investigates the software process model selection
in the context of large market-driven embedded software product development
for new telecommunications equipment. Based on a quasi-formal comparison
of publicly known software process models including modern agile
methodologies, we propose a process model selection frame, which
the project manager can use as a systematic guide for (re)choosing
the project's process model. A novel feature of this comparative
selection model is that we make the comparison against typical software
project problem issues. Some real-life project case examples are
examined against this model. The selection matrix expresses how different
process models answer to different questions, and indeed there is
not a single process model that would answer all the questions. On
the contrary, some of the seeds to the project problems are in the
process models themselves. However, being conscious of these problems
and pitfalls when steering a project enables the project manager
to master the situation.","How to steer an embedded software project: tactics for selecting
the software process model",0
160,"The Effect of Human Memory Organization on Code Reviews under Different
Single and Pair Code Reviewing Scenarios
Human memory organization has been shown to be related to how programmers
understand programs. In recent years, agile methods brought the emphasis
back on human and social aspects of software engineering with a set
of new principles and practices. One of them, pair programming has
been shown to improve quality and reduce the development costs. In
this position paper, we propose a controlled experiment to evaluate
the effect of human memory organization through chunking on code
reviews under different single and pair code reviewing scenarios.","The Effect of Human Memory Organization on Code Reviews under Different
Single and Pair Code Reviewing Scenarios",0
161,"How and Why Collaborative Software Development Impacts the Software
Engineering Course
This paper presents the results of an initial quantitative investigation
to assess a variety of factors that potentially affect the collaborative
software development experience. This research was conducted with
119 students in two undergraduate software engineering classes at
North Carolina State University. A survey was administered where
students could reflect on their collaborative experiences. We analyzed
these factors for interrelationships as well as for correlations
with performance in the course, grade point average, and SAT scores.
Our findings support the components of the proposed Social Interaction
Model of Pair Programming. The substantiation of the Social Interaction
Model of Pair Programming values suggests that they should be considered
in course planning. We also find that work ethic and self-perceived
programming ability positively correlate with GPA.","How and Why Collaborative Software Development Impacts the Software
Engineering Course",1
162,"Teaching Software Engineering Practices with Extreme Programming
Extreme Programming (XP), one of many models for software development,
has challenged some traditional software engineering practices while
taking others to the extreme. The controversial practices raise questions
about the role of XP in teaching undergraduate software engineering
courses, especially capstone project courses. Can an XP model for
software development be successfully used in teaching software engineering
practices? Specific educational goals for the course are that 1)
students recognize the strengths and weaknesses of XP as a model
for software development and 2) that students evaluate XP practices
in the larger context of other software engineering practices. Students
should also complete a software development project while following
a defined set of processes and practices. Students in a 4 credit,
one-semester software engineering practices course used XP for their
project. A survey of fifteen practices representing both XP and more
traditional software engineering practices was given to students
upon completion of the course to determine the students’ perceptions
and experiences. Overall, students were successful in using XP for
their projects. Students liked pair programming, automated testing,
and test-first and believed it contributed to their success. The
XP practices of simple design and refactoring did not work well.
XP’s practices for embracing change accommodates changing requirements,
design, and code but do not manage change well for the overall goals
of the product. Survey results and anecdotal evidence suggests that
108 students were aware of the strengths and weaknesses of XP and
its relationship to more traditional software engineering practices.",Teaching Software Engineering Practices with Extreme Programming,0
163,"Preliminary analysis of the effects of pair programming and test-driven
development on the external code quality
Test-driven development (TDD) and pair programming (PP) are the key
practices of eXtreme Programming methodology that have caught the
attention of software engineers and researchers worldwide. On of
the aims of the large experiments performed at Wroclaw University
of Technology was to investigate the difference between test-driven
development and the traditional, tets-last development as well as
pair programming and solo programming with respect to the external
code quality. It appeared that the external code quality was lower
when test-driven development was used instead of the classic, test-last
software development approach in case of solo programmers (p=0.013).
There was no difference in the external code quality when pair programming
was used instead of solo programming.","Preliminary analysis of the effects of pair programming and test-driven
development on the external code quality",1
164,"A Cross-program investigation of students' perception of agile methods
Research was conducted on using agile methods in software engineering
education. This paper explores the perceptions of students from five
different academic levels of agile practices. Information has been
gathered through the collection of quantitative and qualitative data
over three academic years, and analysis reveals student experiences,
mainly positive but also some negative. Student opinions indicate
the preference to continue to use agile practices at the workplace
if allowed. A way these findings may potentially be extrapolated
to the industrial settings is discussed. Finally, this report should
encourage other academics considering adoption of agile methods in
their computer science or software engineering curricula.",A Cross-program investigation of students' perception of agile methods,0
165,"Investigating pair-programming in a 2nd-year software development
and design computer science course
This paper presents the results of a pair programming experiment conducted
at the University of Auckland (NZ) during the first semester of 2004.
It involved 300 second year computer science students attending a
software design and construction course. We investigated similar
issues to those reported by L. Williams et al., (2003) and employed
a subset of the questionnaires used on the experiments presented.
Our results support the use of pair programming as an effective programming/design
learning technique.","Investigating pair-programming in a 2nd-year software development
and design computer science course",1
166,"Agile software development: human values and culture
Software engineers need to know how to evaluate different methods
of developing software. A group of new development methods have emerged
under the general label ""agile development."" These techniques are
sometimes called ""light weight"" as opposed to ""heavy weight"" techniques
such as those based on the waterfall model. Two classic ethical techniques
- utilitarian and deontological analyses - can offer insights into
the arguments surrounding, agile methods. These and other applied
ethics techniques offer software engineers a more precise language
for articulating their ideas about software engineering issues that
involve human values.",Agile software development: human values and culture,0
167,"Two controlled experiments concerning the comparison of pair programming
to peer review
This paper reports on two controlled experiments comparing pair programming
with single developers who are assisted by an additional anonymous
peer code review phase. The experiments were conducted in the summer
semester 2002 and 2003 at the University of Karlsruhe with 38 computer
science students. Instead of comparing pair programming to solo programming
this study aims at finding a technique by which a single developer
produces similar program quality as programmer pairs do but with
moderate cost. The study has one major finding concerning the cost
of the two development methods. Single developers are as costly as
programmer pairs, if both programmer pairs and single developers
with an additional review phase are forced to produce programs of
similar level of correctness. In conclusion, programmer pairs and
single developers become interchangeable in terms of development
cost. As this paper reports on the results of small development tasks
the comparison could not take into account long time benefits of
either technique.","Two controlled experiments concerning the comparison of pair programming
to peer review",1
168,"Pair programming vs. side-by-side programming
In agile methodologies communication between programmers is very important.
Some of them (e.g. XP or Crystal Clear) recommend pair programming.
There are two styles of pair programming: XP-like and side-by-side
(the latter comes from Crystal Clear). In the paper an experiment
is described that aimed at comparison of those two styles. The subjects
were 25 students of Computer Science of 4th and 5th year of study.
They worked for 6 days at the university (in a controlled environment)
programming Web-based applications with Java, Eclipse, MySQL, and
Tomcat. The results obtained indicate that side-by-side programming
is a very interesting alternative to XP-like pair programming mainly
due to less effort overhead (in the experiment the effort overhead
for side-by-side programming was as small as 20%, while for XP it
was about 50%).",Pair programming vs. side-by-side programming,1
169,"The drawing carousel: A Pair Programming experience
The participants will experience how a pair programming team works.
Working in a single pair is different from working on your own: You
have to articulate what you want to do, the other person (probably)
has some different insights, and the result will be different from
what you would have done on your own. But.. this is only half of
the story: working in a Pair Programming Team has many more advantages:
knowledge is spread, the team creates an own style, parallel development
becomes easy, truck factor (http://c2.con/cgi/wiki?TruckNumber) is
reduced. The team creates the product (instead of individual programmers
creating the parts), the product is a whole, not a mixture of individual
results. You will learn about the necessity of agile tools like daily
standup meetings, pair rotation, coding standards and collective
code ownership, how they work, and what their effects are. You will
experience improvements for the quality of you product, and for the
productivity of the team.",The drawing carousel: A Pair Programming experience,0
170,"Pair Programming as a Model of Collaborative Learning: A Review of
the Research
Pair programming is a form of collaborative learning; the pair works
together to achieve a common goal. Recent research has clearly documented
the benefits of pair programming on student performance. Collaborative
learning research has established two things: (1) the effectiveness
of having students work together and, (2) the critical attributes
common to successful collaborative learning approaches. This paper
uses the critical attributes of collaborative learning as a framework
to review research on pair programming. The conclusion is that pair
programming, as reported in the literature, is a model of collaborative
learning, i.e., pair programming is generally consistent with the
identified critical attributes. One way that those of us who use
the pair programming pedagogy can enhance this consistency is to
increase the emphasis on the pair programming process.","Pair Programming as a Model of Collaborative Learning: A Review of
the Research",0
171,"Experiences with pair and tri programming in a second level course
In this paper we describe our experiences with multi-programming (pair
and tri programming) in a second level course. The course, ""Application
Software Development"" is a second year course, which has a heavy
emphasis on Java programming in the labs as well as the development
of a full-fledged project. The objective of the course is to build
an entire project that comprises of various software engineering
activities that span across the semester. In general, we observe
that multi-programming improves the students' ability in analytical
thinking and communicating the conceptual ideas. It also raises certain
issues when this approach is adopted in the educational context.
In this paper we discuss some of these issues. Overall, multi-programming
experience has been a rewarding experience for the students in spite
of certain problems that were encountered .",Experiences with pair and tri programming in a second level course,0
172,"The new context for software engineering education and training
(no abstract)",The new context for software engineering education and training,0
173,"eXtreme Programming - helpful or harmful in educating undergraduates?
Criticism is sometimes leveled at the academic Software Engineering
community on the basis that current educational practices are too
document-centric. Both students and practitioners have suggested
that one of the popular, lighter-weight, agile methods would be a
better choice. This paper examines the educational goals for undergraduate
Software Engineering education and considers how they might be met
by the practices of eXtreme Programming. Our judgment is that education
about some agile practices could be beneficial for small-scale development.
However, as it stands now, eXtreme Programming as a package does
not lend itself for use in educating about large-scale system development
in tertiary education.",eXtreme Programming - helpful or harmful in educating undergraduates?,0
174,"Dialog-based protocol: an empirical research method for cognitive
activities in software engineering
This paper proposes dialog-based protocol for the study of the cognitive
activities during software development and evolution. The dialog-based
protocol, derived from the idea of pair programming, is a significant
alternative to the common think-aloud protocol, because it lessens
the Hawthorne and placebo effects. Using screen-capturing and voice
recording instead of videotaping further reduces the Hawthorne effect.
The self-directed learning theory provides an encoding scheme and
can be used in analyzing the data. A case study illustrates this
new approach.","Dialog-based protocol: an empirical research method for cognitive
activities in software engineering",0
175,"Pair Programming in Graduate Software Engineering Course Projects
Pair programming has been used in undergraduate classes in order to
develop student skills and to enhance student learning. Experiments
with such an approach have demonstrated positive effects. This paper
investigates the effects of pair programming in the graduate software
engineering class by conducting a case study with six students who
were assigned to work on incremental changes on an open source application
either as pairs or as individuals. The results of the case study
showed that paired students completed their change request tasks
faster and with higher quality than individuals. They also wrote
less lines of code and used more meaningful variable names. Pair
programming could be an effective and useful approach for graduate
software engineering classes.",Pair Programming in Graduate Software Engineering Course Projects,1
176,"Undergraduate student perceptions of pair programming and agile software
methodologies: verifying a model of social interaction
One of the reasons that undergraduate students, particularly women
and minorities, can become disenchanted with computer science education
is because software development is wrongly characterized as a solitary
activity. We conducted a collective case study in a software engineering
course at North Carolina State University to ascertain the effects
of a collaborative pedagogy intervention on student perceptions.
The pedagogy intervention was based upon the practices of agile software
development with a focus on pair programming. Six representative
students in the course participated in the study. Their perspectives
helped validate a social interaction model of student views. The
findings suggest that pair programming and agile software methodologies
contribute to more effective learning opportunities for computer
science students and that students understand and appreciate these
benefits.","Undergraduate student perceptions of pair programming and agile software
methodologies: verifying a model of social interaction",1
177,"Effects of pair programming at the development team level: an experiment
We studied the effects of pair programming in a team context on productivity,
defects, design quality, knowledge transfer and enjoyment of work.
Randomly formed three pair programming and two solo programming teams
performed the same 400-hour fixed-effort project. Pair programming
increased the development effort of the first tasks considerably
compared to solo programming, but later the differences were small.
Due to this learning time the pair programming teams had worse overall
project productivity. Task complexity did not affect the effort differences
between solo and pair programming. The pair programming teams wrote
code with fewer defects, but were less careful in system testing,
and therefore delivered systems with more defects. They may have
relied too much on the peer review taking place during programming.
Knowledge transfer seemed to be higher within the pair programming
teams. Finally, we also found weak support for higher enjoyment of
work in the pair programming teams.",Effects of pair programming at the development team level: an experiment,1
178,"Empirical validation of pair programming
This paper discusses an empirical assessment of pair programming.
Several agile processes arose and have been adopted in industry with
the promise of producing working software in the early phases of
production process and to make the organization flexible and adaptable
with respect to the changing environment. The outcomes of the experiments
can be summarized as follows: (i) pair programming improves the productivity
of developers with respect to solo programming; (ii) it also fosters
knowledge transfer between the developers of the pair: the experiment
suggests that this effect is emphasized when both the components
own the same educational background; and, finally, (iii) distributing
the components of a pair could seriously deteriorate expected benefits,
if an appropriate support for communication and collaboration is
not set up.",Empirical validation of pair programming,0
179,"Managing a project course using Extreme Programming
Shippensburg University offers an upper division project course in
which the students use a variant of Extreme Programming (XP) including:
the Planning Game, the Iteration Planning Game, test driven development,
stand-up meetings and pair programming. We start the course with
two weeks of controlled lab exercises designed to teach the students
about test driven development in JUnit/Eclipse and designing for
testability (with the humble dialog box design pattern) while practicing
pair programming. The rest of our semester is spent in three four-week
iterations developing a product for a customer. Our teams are generally
large (14-16 students) so that the projects can be large enough to
motivate the use of configuration management and defect tracking
tools. The requirement of pair programming limits the amount of project
work the students can do outside of class, so class time is spent
on the projects and teaching is on-demand individual mentoring with
lectures/labs inserted as necessary. One significant challenge in
managing this course is tracking individual responsibilities and
activities to ensure that all of the students are fully engaged in
the project. To accomplish this, we have modified the story and task
cards from XP to provide feedback to the students and track individual
performance against goals as part of the students' grades. The resulting
course has been well received by the students. This paper will describe
this course in more detail and assess its effect on students' software
engineering background through students' feedback and code metrics.",Managing a project course using Extreme Programming,0
180,"Pair Programming Strategies for Middle School Girls
A large gender gap exists with who designs and produces new computer
technology; men overwhelmingly dominate the field. Studies have shown
that women are more likely to pursue and persist in computer science
when they have the confidence to problem-solve and explore without
fear of breaking the computer, see social aspects of computing, and
see a value to computing consistent with their self identity. Pair
programming, developed for use in software design as part of the
extreme programming methodology, puts two people working together
at all phases of software development. Pair programming is also a
collaborative, instructional approach, shown to increase learning,
investment, and interest in computer science among both male and
female university students, in particular females. We are studying
pair programming with middle school girls for the purpose of devising
a controlled study of the benefits. This paper will describe how
we have implemented pair programming in the middle school environment
and what we have learned so far about how this approach may benefit
girls. We describe our current strategies so that others may use
this collaborative approach both for experimentation and for practical
application.",Pair Programming Strategies for Middle School Girls,0
181,"An empirical study of relationships among extreme programming engineering
activities
Extreme programming (XP) is an agile software process that promotes
early and quick production of working code. In this paper, we investigated
the relationship among three XP engineering activities: new design,
refactoring, and error fix. We found that the more the new design
performed to the system the less refactoring and error fix were performed.
However, the refactoring and error fix efforts did not seem to be
related. We also found that the error fix effort is related to number
of days spent on each story, while new design is not. The relationship
between the refactoring effort and number of days spent on each story
was not conclusive.","An empirical study of relationships among extreme programming engineering
activities",0
182,"eXtreme Teaching: A framework for continuous improvement
Many universities have experienced an increase in the intake of students
and at the same time cuts in the budgets for teaching. Many teachers
have discovered, for a number of reasons, that they have to adjust
their teaching or even a course with short notice. These facts pose
a challenge to the teachers’ agility in adapting to changes—and in
doing it in a cost-efficient way. We propose eXtreme Teaching as
a framework that allows teachers to focus on experimenting with and
improving their teaching techniques without compromising quality.
The framework and the associated practices provide quick, accurate
feedback that teachers can act on. eXtreme Teaching will allow better
student learning, stronger relationships with the students, increased
interaction and development of the staff involved, less risk—and
probably happier staff members. In this paper, we will describe the
eXtreme Teaching framework and discuss and motivate its background.",eXtreme Teaching: A framework for continuous improvement,0
183,"Software process improvement with agile practices in a large telecom
company
Besides the promise of rapid and efficient software development, agile
methods are well-appreciated for boosting communication and motivation
of development teams. However, they are not practical ""as such"" in
large organizations, especially because of the well-established,
rigid processes in the organizations. In this paper, we present a
case study where a few agile practices were injected into the software
process of a large organization in order to pilot pair programming
and improve the motivation and competence build-up. The selected
agile practices were pair programming, the planning game and collective
code ownership. We show how we adjust these practices in order to
integrate them into the existing software process of the company
in the context of a real software project.","Software process improvement with agile practices in a large telecom
company",0
184,"Task complexity and effectiveness of pair programming: An experimental
study
Extreme Programming, which is recently gaining popularity as an alternate
software development methodology, involves two programmers working
collaboratively to develop software. This study examined the efficacy
of pair programming by comparing the effectiveness of collaborating
pairs with those of programmers working individually. Student subjects
participated in a controlled laboratory experiment. Two factors were
manipulated in the experiment: programming task complexity (high
vs. low) and programmers working individually vs. in pairs. The performance
of programmer pairs was compared with those of the best performer
and the second best performer from among nominal pairs. An important
finding of the study is that programmer pairs outperform second best
programmers in nominal groups, but perform at comparable levels as
the best programmers in nominal groups. The best programmers among
collaborating pairs also develop significantly better understanding
of the problem domain, reflected in their task mental model, compared
to the second-best individuals working individually in nominal pairs.
Their mental models were however comparable to that of the best programmers
in the nominal groups. These two relationships were found to be consistent
across different levels of task complexity. In terms of perceptual
outcomes, the best programmers among the collaborating pairs have
comparable levels of overall satisfaction as the best and second-best
individuals in the nominal groups, while second-best programmers
among collaborating pairs have higher satisfaction than the best
and second-best individuals in the nominal pairs. An additional finding
was that best programmers among the collaborating pairs have higher
confidence in their solution than best programmers in nominal pair
when task complexity is low, but not when it is high.","Task complexity and effectiveness of pair programming: An experimental
study",1
185,"Programming in pairs with Alice to improve confidence, enjoyment,
and achievement
Students in an introductory computing class participated in a study
investigating the impact of using a graphics programming environment
(Alice) and pair-programming on confidence, enjoyment and achievement.
Sixty-four participants completed a short questionnaire and a content
pre-test about computer programming concepts. Students were then
assigned to one of two groups: individual or paired. The pairs completed
a tutorial on Alice and then completed a short assignment over a
period of one week working as a team of two. The individuals completed
the same tutorial and assignment but completed it alone. Lastly,
all participants took the same questionnaire and content post-test.
The results showed that all students experienced increased confidence
in programming, that students in pairs enjoyed programming more than
students who worked individually, and that all students performed
significantly better on the content post-test.","Programming in pairs with Alice to improve confidence, enjoyment,
and achievement",0
186,"The collaborative nature of pair programming
This paper considers the nature of pair programming. It focuses on
using pair programmers' verbalizations as an indicator of collaboration.
A review of the literature considers the benefits and costs of co-operative
and collaborative verbalization. We then report on a set of four
one-week studies of commercial pair programmers. From recordings
of their conversations we analyze which generic sub-tasks were discussed
and use the contribution of new information as a means of discerning
the extent to which each pair collaborated. We also consider whether
a particular role is more likely to contribute to a particular sub-task.
We conclude that pair programming is highly collaborative in nature,
however the level of collaboration varies according to task. We also
find that tasks do not seem aligned to particular roles, rather the
driver tends to contribute slightly more across almost all tasks.",The collaborative nature of pair programming,0
187,"Coordination for multi-person visual program development
Typically, visual programming has been limited to only one person
developing one program at a time. This article describes a technique
for helping multiple people coordinate working together on the same
diagram at the same time. This approach identifies transactions based
on domain syntax. These transactions are used to notify people when
someone else changes the diagram in a way that is likely to impact
other people's work. In particular, the system assigns ownership
of each syntactically incorrect element to the person who last acted
upon that element. This ownership can be transferred between people.
The potential problem of incomplete transactions when work extends
beyond a single session is resolved by restarting transactions when
work resumes. This syntax-based approach is particularly appropriate
for visual languages. Various domain constraints are described as
alternatives or supplements to the syntactic criteria. The technique
was validated with data from 20 groups of three people using CoDiagram,
a proof of concept system.",Coordination for multi-person visual program development,0
188,"Performances of pair designing on software evolution: a controlled
experiment
Evolving software design is a critical activity for many reasons:
inadequate documentation, loss of strategic knowledge due to personnel's
turnover, intrinsic complexity of software design. As a consequence,
performances in the evolution tasks may deteriorate. Some experiments
demonstrate that pair programming is able to reduce the time spent
for accomplishing the tasks while increasing the overall work quality.
Pair programming is usually applied to coding; the term 'pair designing'
refers to applying the practice of working in pairs to the design
phase. Because of the asymmetry existing between coding and designing,
pair designing could not replicate all the benefits of pair programming.
This paper discusses a controlled experiment for understanding which
are the effects of pair designing when evolving software design.","Performances of pair designing on software evolution: a controlled
experiment",1
189,"How distribution affects the success of pair programming
Recent experiments demonstrated the effectiveness of pair programming
in terms of quality and productivity. Growing interest towards global
software development is fostering the design of suitable methods
and tools for distributing software processes, at any level of detail,
from entire subprocesses up to a single activity. Consequently, people
placed in different locations could also share programming tasks
and related practices, such as pair programming. Unfortunately, distribution
might seriously compromise the success of pair programming, due to
communication and collaboration issues. We have performed an experiment
in order to investigate the impact of distribution on pair programming
when performing maintenance tasks. An interesting conjecture stems
from the experiment: under certain conditions, distributed pair's
components tend to dismiss from each other, stopping the collaborative
work. This can be a very expensive risk factor to keep into account
when planning tasks of distributed pair programming.",How distribution affects the success of pair programming,0
190,"Critical Personality Traits in Successful Pair Programming
Pair programming (PP) is a common practice in Extreme programming,
in which two programmers work together using a single computer. The
close interaction required by PP makes it difficult to apply. The
hypothesis is that certain personality traits are crucial for the
success of PP, and PP partners should be chosen based on these personality
traits. In this research, we first survey the programmers in industry
to identify the perceived important personality traits for PP, and
then conduct experiments to determine the significance of these personality
traits in successful PP.",Critical Personality Traits in Successful Pair Programming,1
191,"Pair collaboration in end-user debugging
The problem of dependability in end-user programming is an emerging
area of interest. Pair collaboration in end-user software development
may offer a way for end users to debug their programs more effectively.
While pair programming studies - primarily of computer science students
and professionals - report positive outcomes in terms of overall
program quality, little is known about specific activities that pairs
engage in that lead to those outcomes, or of how the previous results
may pertain to end-user programmers. In this paper we analyze protocols
of end-user pairs debugging spreadsheets. The results suggest that
end-user pairs can achieve rich reasoning, effective planning, and
systematic evaluation. Furthermore, end-user pairs provide specific
types of mutual support that facilitate the accomplishment of their
goals.",Pair collaboration in end-user debugging,0
192,"Interruptions on Software Teams: A Comparison of Paired and Solo
Programmers
This study explores interruption patterns among software developers
who program in pairs versus those who program solo. Ethnographic
observations indicate that interruption length, content, type, occurrence
time, and interrupter and interruptee strategies differed markedly
for radically collocated pair programmers versus the programmers
who primarily worked alone. After presenting an analysis of 242 interruptions
drawn from more than 40 hours of observation data, we discuss how
team configuration and work setting influenced how and when developers
handled interruptions. We then suggest ways that CSCW systems might
better support pair programming and, more broadly, provide interruption-handling
support for workers in knowledge-intensive occupations.","Interruptions on Software Teams: A Comparison of Paired and Solo
Programmers",0
193,"Three studies of problem solving in collaborative software development
A potential solution to producing quality software in an acceptable
time frame may be found by using the newer, innovative methods, such
as collaborative software development. The purpose of this dissertation
is to examine the individual developer characteristics, developmental
settings, collaborative methods and the processes during development
that impact collaborative programming performance and satisfaction
outcomes. Understanding individual differences in performance in
the collaborative development setting is important, since it may
help us understand how the collaborative setting may raise the lowest
level of performance to much higher levels, as well as how to select
individuals for collaborative development. Exploring the impact of
the virtual setting on collaborative development processes is important
as it may help us improve performance outcomes in different work
settings. Investigating how adaptations of pair programming impact
collaborative processes may assist in implementing changes to the
method that enhance quality and individual satisfaction. A multi-phase
methodology is used, consisting of an intensive process study (Study
1) and two laboratory experiments (Studies 2 and 3). Study 1 illustrates
that collaborative programming (pair programming) outcomes are moderated
by both individual developer differences and the processes used during
development. While cognitive ability and years of IT experience are
important factors in performance, the impacts of conflict and the
faithful appropriation of the method are highlighted. Distributed
cognition is used as a theoretical foundation for explaining higher
performance. Study 2 findings suggest that while collaborative programming
is possible in a virtual setting, performance is negatively impacted.
Face-to-face programmers have significantly higher levels of task
performance, as well as satisfaction with the method, when compared
to virtual programmers. Study 3 results suggests that the use of
structured problem solving (preparing test cases before writing code)
may be a key factor in producing higher quality code, while collaboration
may be indusive to higher levels of developer satisfaction. By understanding
how, why and when collaborative programming techniques produce better
performance outcomes and what factors contribute to that success,
we add to the body of knowledge on methodologies in the MIS domain.",Three studies of problem solving in collaborative software development,0
194,"Using a role scheme to derive software project metrics
Roles' playing is common in our lives. We play different roles with
our family, at work as well as in other environments. Role allocation
in software development projects is also accepted though it may be
implemented differently by different software development methods.
In a previous work [Y. Dubinsky, O. Hazzan, Roles in agile software
development teams, in: 5th International Conference on Extreme Programming
and Agile Processes in Software Engineering, 2004, pp. 157-165] we
have found that personal roles may raise teammates' personal accountability
while maintaining the essence of the software development method.
In this paper we present our role scheme, elaborate on its implementation
and explain how it can be used to derive metrics. We illustrate our
ideas by data gathered in student projects in the university.",Using a role scheme to derive software project metrics,0
195,"Globally distributed software development and pair programming
This paper examines whether globally distributed software development
teams can enjoy the benefits that pair programming offers. The paper
lists seven properties that need to exist before the benefits of
pair programming can be realized. These properties emerge when two
people work side-by-side in close proximity. This paper underscores
the importance for ""remote"" pairs to exhibit these properties if
they want to reap the same benefits as close-proximity pair programming.",Globally distributed software development and pair programming,0
196,"The pairing session as the atomic unit of work
We have an extreme programming team at a small company dedicated to
the agile approach. Our team of 7 developers decided to use the pairing
session as the fundamental unit of work for all organizing, planning,
estimating, tracking, and of course, pair programming. It's been
a great way to structure the day, provide rhythm and facilitate partner
swaps. Estimating and tracking in pairing sessions provides us concrete
feedback for improving estimates. This approach constitutes a hybrid
between real time and abstract-unit estimating, resulting in highly
effective planning and an extremely stable velocity. We have been
working this way for about a year and have been exceptionally pleased
with the results.",The pairing session as the atomic unit of work,0
197,"Field experiences with eXtreme programming: Developing an emergency
response system
eXtreme Programming (XP) is a well-known agile software development
method. While a number of reports have been published on explaining
the XP methodology and the perceived benefits when using XP for system
development in recent years, less is known about the actual operationalization
of the XP principles. This paper presents an action research study
reporting on the experiences of implementing the XP methodology in
a development project for a Web-based, distributed information system.
The goal of this research was to increase the understanding of how
to effectively operationalize XP techniques so that the system being
developed catered to today's fast-paced technological environment
by allowing the developers to respond quickly to innovative and changing
requirements. Overall, the research indicates that most of the XP
principles could be effectively implemented; however, three of the
principles required modification (i.e., testing, pair programming,
customer collocation). Several benefits resulted from the usage of
XP. The rapid prototyping enabled information technology developers
and users to clarify system requirements, communicate openly, quickly
build rapport, and create an interface that was easy to use and learn.
Further, the research found that where the technology was new or
foreign to the development team and the user, the XP process was
flexible enough to support several iterations of technology and produce
prototypes in a timely manner. Pair programming appeared to work
effectively and offer value; however, it is not always practically
feasible.","Field experiences with eXtreme programming: Developing an emergency
response system",0
198,"Panel: cooperative learning - beyond pair programming and team projects
In traditional college teaching, most class time is spent with the
instructor lecturing and students passively listening and taking
notes. Homework is done individually, and collaboration is penalized
as cheating. Instructor-centric teaching methods have repeatedly
been found inferior to cooperative learning, in which students work
in teams on problems and projects that foster interdependence while
maintaining individual accountability. In recent years, the CS education
community has enthusiastically embraced two collaborative-learning
practices: pair programming and team projects. But why stop there?
Classroom time can be devoted to group exercises, and homework assignments
can be arranged so that each student plays a role in educating other
members of the class. Cooperative learning has been shown to increase
retention and boost the performance of at-risk students. This panel
presents cooperative-learning exercises that can be used in any class,
without special hardware or proprietary software.",Panel: cooperative learning - beyond pair programming and team projects,0
199,"Student attitudes toward pair programming
Students in four introductory programming classes who participated
in a pair programming study had very positive attitudes toward pair
programming: they liked it, thought that it was fun, would like to
do it again, and believed that they learned more because they paired.
Although the students as a whole had positive attitudes, the results
were not consistent between instructors; in particular, the students
in one of the courses were significantly less positive about pair
programming. The implications of instructor-based differences in
attitude are discussed. This paper also examines the relationship
between student confidence and attitudes toward pair programming.
The most confident students liked pairing the most, while the least
confident students liked it the least. This finding contradicts results
that have been reported elsewhere.",Student attitudes toward pair programming,1
200,"Attitudes on using pair-programming
During a research study conducted over four semesters, students enrolled
in an introductory programming class at a commuter campus used the
pair-programming approach for both in-class labs and out-of-class
programming assignments. This study was a comprehensive assessment
of pair-programming using multiple measures of both quantitative
and qualitative feedback about students' experiences with pair-programming.
The results show that overwhelmingly, students reported positive
reactions to working with a partner using the pair-programming paradigm.
As expected at a commuter campus, the most common challenge students
reported was difficulty of coordinating schedules. This article provides
the results of the study and offers suggestions for managing pair-programming
on a commuter campus.",Attitudes on using pair-programming,1
201,"Programming in pairs in high schools
Extreme programming (XP) is a new style of software development focusing
on excellent applications of programming techniques, clear communication,
and team work, which gives unimaginable results. A major practice
of extreme programming is pair programming. There are two programmers
working side by side at the same computer, collaborating on the same
analysis, the same design, implementation and test. Proponents of
pair programming argue that programs produced by pairs are of higher
quality, with less errors, better design than those produced by one
programmer. And they are made in the shortest time possible as well.
We think that pair programming model has also been found to be beneficial
for students. Initial quantitative and qualitative results demonstrate
that the use of pair programming in the computer science classroom
enhances student learning and satisfaction. We explore the nature
of pair programming, then examine the ways such a practise may enhance
teaching and learning in computer science education.",Programming in pairs in high schools,0
202,"Changing students' perceptions: an analysis of the supplementary
benefits of collaborative software development
Collaborative work has been in use as an instructional tool to increase
student understanding through collaborative learning and to improve
student performance in computer science courses. However, little
work has been done to understand how the act of collaboration, through
pair programming or group work, impacts a student's knowledge of
the benefits and difficulties of collaborative work experience in
collaborative work is essential preparation for professional software
development. A study was conducted at North Carolina State University
to assess changes in advanced undergraduate students' perceptions
of pair programming and collaboration. Student personality types,
learning styles, and other characteristics were gathered during two
semesters of an undergraduate software engineering course. The study
found that, after experiencing pair programming, most students indicated
a stronger preference to work with another student, believed that
pairing made them more organized, and believed that pairing saved
time on homework assignments. Students who disliked their collaborative
experiences were predominantly reflective learners, introverts, and
strong coders. Those students also cited that a non-participatory
partner and difficulties scheduling meeting times outside of the
classroom were primary reasons for disliking pair programming. Personality
type and learning style had little effect on the changes in perceptions
of collaboration.","Changing students' perceptions: an analysis of the supplementary
benefits of collaborative software development",1
203,"Motivations and measurements in an agile case study
With the recent emergence of agile software development technologies,
the software community is awaiting sound, empirical investigation
of the mpacts of agile practices in a live setting. One means of
conducting such research is through industrial case studies. There
are a number of influencing factors that contribute to the success
of such a case study. In this paper, we describe a case study performed
at Sabre Airline SolutionsTM evaluating the effects of adopting Extreme
Programming (XP) practices with a team that had characteristically
plan-driven risk factors. We compare the team's business-related
results (productivity and quality) to two published sources of industry
averages. Our case study found that the Sabre team yielded above-average
post-release quality and average to above-average productivity. We
discuss our experience in conducting this case study, including specifics
of how data was collected, the rationale behind our process of data
collection, and what obstacles were encountered during the case study.
We identify four factors that potentially impact the outcome of industrial
case studies: availability of data, tool support, cooperative personnel
and project status. Recognizing and planning for these factors is
essential to conducting industrial case studies.",Motivations and measurements in an agile case study,0
204,"Applyinq AspectJ to J2EE application development
(AOP) programming is a technique that allows programmers to modularize
crosscutting concerns (behavior that cuts across the typical divisions
of responsibility, such as concurrency or security). Aspect-oriented
programming and the AspectJ language can reduce code size and defects
while increasing understandability. Video Monitoring Services of
America (VMS) began to investigate the adoption of AOP into the development
of Adbase, the Java 2 Enterprise Edition-based application. Adbase
supplies a Web-based search and e-commerce interface on VMS's library
of advertising data. It uses a wide range of J2EE technologies, both
commercial and open source. The Adbase team varied from four to seven
full-time developers during the time frame covered by this article.
We followed a modified version of extreme programming with a focus
on emergent design and adherence to XP practices such as programmer
testing-and pair programming.",Applyinq AspectJ to J2EE application development,0
205,"Pair programming productivity: Novice-novice vs. expert-expert
Agile Software Development methodologies have grown in popularity
both among academic researchers and industrial practitioners. Among
the various methodologies or practices proposed, pair programming,
which is concerned with two programmers collaborating on design,
coding and testing, has become a controversial focus of interest.
Even though some success stories have been reported with the use
of pair-programming in real software development environment, many
people remain rather skeptical of the claims on pair-programming
productivity. Previous studies in pair programming have only addressed
the basic understanding of the productivity of pairs and they have
not addressed the variation in productivity between pairs of varying
skills and experience, such as between novice-novice and expert-expert.
Statistical productivity measurements reported by different researchers
also seem to lead to contradictory conclusions. Until now, the literature
has not addressed how those results and experiments were related
to each other. In this paper, we propose a controlled experiment
called repeat-programming which can facilitate the understanding
of relationships between human experience and programming productivity.
Repeat-programming can be performed when controversial issues in
non-traditional programming methodologies and development productivity
need to be investigated into. To illustrate how the proposed empirical
experiment can put arguable, divisive problems into perspective,
we have examined the productivity in pair programming as a case study.
With repeat-programming, we are able to (i) better understand why
results of previous pair programming control experiments reached
different conclusions as to the productivity of pair programming
and (ii) most importantly, present a case in which novice-novice
pairs against novice solos are much more productive than expert-expert
pairs against expert solos.",Pair programming productivity: Novice-novice vs. expert-expert,0
206,"Software process fusion: Uniting pair programming and solo programming
processes
The role of pair programming process in software development is controversial.
This controversy arises in part from their being presented as alternatives,
yet it would be more helpful to see them as complementary software
management tools. This paper describes the application of such a
complementary model, software process fusion (SPF), in a real-world
software management situation in China. Pair and solo programming
are adopted at different stages of the process and according to the
background of programmers, as appropriate. Unlike the usual practice
of eXtreme Programming, in which all production code must written
in pairs, all-the-time pair programming, the proposed model encourages
programmers to design code patterns of their own in pairs and then
to use these patterns to build sub-modules solo. The report finds
that the longer team members work alone, the more code patterns they
develop for reuse later in pairs.","Software process fusion: Uniting pair programming and solo programming
processes",0
207,"Pair programming productivity: Novice-novice vs. expert-expert
Agile Software Development methodologies have grown in popularity
both among academic researchers and industrial practitioners. Among
the various methodologies or practices proposed, pair programming,
which is concerned with two programmers collaborating on design,
coding and testing, has become a controversial focus of interest.
Even though some success stories have been reported with the use
of pair-programming in real software development environment, many
people remain rather skeptical of the claims on pairprogramming productivity.
Previous studies in pair programming have only addressed the basic
understanding of the productivity of pairs and they have not addressed
the variation in productivity between pairs of varying skills and
experience, such as between novice–novice and expert–expert. Statistical
productivity measurements reported by different researchers also
seem to lead to contradictory conclusions. Until now, the literature
has not addressed how those results and experiments were related
to each other. In this paper, we propose a controlled experiment
called repeat-programming which can facilitate the understanding
of relationships between human experience and programming productivity.
Repeat-programming can be performed when controversial issues in
nontraditional programming methodologies and development productivity
need to be investigated into. To illustrate how the proposed empirical
experiment can put arguable, divisive problems into perspective,
we have examined the productivity in pair programming as a case study.
With repeat-programming, we are able to (i) better understand why
results of previous pair programming control experiments reached
different conclusions as to the productivity of pair programming
and (ii) most importantly, present a case in which novice–novice
pairs against novice solos are much more productive than expert–expert
pairs against expert solos.",Pair programming productivity: Novice-novice vs. expert-expert,1
208,"The impact of pair programming and test-driven development on package
dependencies in object-oriented design - an experiment
Test-driven development (TDD) and pair programming are software development
practices popularized by extreme programming methodology. The aim
of the practices is to improve software quality. Provide an empirical
evidence of the impact of both practices on package dependencies
playing a role of package level design quality indicators. An experiment
with a hundred and eighty eight MSc students from Wroclaw University
of Technology, who developed finance-accounting system in different
ways (CS - classic solo, TS - TDD solo, CP - classic pairs, TP -
TDD pairs). It appeared that package level design quality indicators
(namely package dependencies in an object-oriented design) were not
significantly affected by development method. Generalization of the
results is limited due to the fact that MSc students participated
in the study. Previous research revealed that using test-driven development
instead of classic (test-last) testing approach had statistically
significant positive impact on some class level software quality
indicators (namely CBO and RFC metrics) in case of solo programmers
as well as pairs. Combined results suggest that the positive impact
of test-driven development on software quality may be limited to
class level.","The impact of pair programming and test-driven development on package
dependencies in object-oriented design - an experiment",1
209,"Is external code quality correlated with programming experience or
feelgood factor?
This paper is inspired by an article by Muller and Padberg who study
the feelgood factor and programming experience, as candidate drivers
for the pair programming performance. We not only reveal a possible
threat to validity of empirical results presented by Muller and Padberg
but also perform an independent research. Our objective is to provide
empirical evidence whether external code quality is correlated with
the feelgood factor, or with programming experience. Our empirical
study is based on a controlled experiment with MSc students. It appeared
that the external code quality is correlated with the feelgood factor,
and programming experience, in the case of pairs using a classic
(test-last) testing approach. The generalization of the results is
limited due to the fact that MSc students participated in the study.
The research revealed that both the feelgood factor and programming
experience may be the external code quality drivers.","Is external code quality correlated with programming experience or
feelgood factor?",1
210,"Influence of codified knowledge on software design task performance:
A comparison of pairs with individuals
The need to improve the success rates of software development projects
has prompted the software engineering community to come-up with various
initiatives. These initiatives include: new software development
processes such as Extreme Programming (XP), leveraging the development
process by reusing existing knowledge of software artifacts. XP utilizes
pairs in the performance of various software development tasks. Moreover,
development of software applications is a knowledge intensive process
that utilizes both tacit and explicit knowledge. This experimental
study utilized software development professionals as subjects and
manipulated the iv mode of participation (individual or pairs) and
availability of codified knowledge (design patterns). Results of
the study indicate that the performance of collaborating pairs were
better than the 2nd best individual in nominal pairs. Collaborating
pairs also took more time than the average time taken by nominal
pairs to complete the task and they were more satisfied than the
individuals. This study also found that the codified knowledge in
the form of design patterns helped in arriving at a better solution.
One interesting finding of this study is the effect of design self-efficacy/collective-efficacy
on task performance.","Influence of codified knowledge on software design task performance:
A comparison of pairs with individuals",0
211,"Pair Design in Undergraduate Labs
Pair programming is widely recognized as a successful method of improving
student competence in computer science while lowering dependence
on teaching staff. In this paper, we propose an approach based on
pair programming, termed pair design, that reinforces program design
and testing skills in addition to collaboration. We describe the
approach and our results in applying it to freshmen and sophomore
laboratory environments.",Pair Design in Undergraduate Labs,0
212,"Pair programming improves student retention, confidence, and program
quality
A study was conducted to investigate the effects of pair programming
on student performance and subsequent pursuit of computer science-related
degrees among both female and male college students taking an introductory
programming course designed for computer science-related majors.
The study provides some of the most compelling evidence to date of
the effectiveness of pair programming as a pedagogical tool. Pairing
was found to bolster course completion and consequently course pass
rates, and contribute to greater persistence in computer science-related
majors. Students who paired were more likely to pass the subsequent
programming course that required them to work alone. This is a strong
indication that pairing did not result in a significant number of
students passing the course without learning how to program due to
a ""free ride"" from their partner. The pairing students also produce
higher quality programs, are more confident in their work, and enjoy
it more.","Pair programming improves student retention, confidence, and program
quality",0
213,"Developing collaborative skills early in the CS curriculum in a laboratory
environment
The research on teaching and learning over the past 50 years suggests
that the early use of collaborative learning leads to higher interest,
higher retention, and higher academic performance in students. Early
use of these techniques can also increase the sense of belonging
for students and can lead to the early development of collaborative
skills to prepare students for team experiences in subsequent courses
and future careers. During the weekly lab sessions of a second semester
introduction to programming course students engaged in collaborative
learning experiences through team-based problem solving, project
planning, pair programming, and other agile software development
practices. Course objectives provided specific goals and criteria
for assessment relative to these skills. The assessment in the authors'
prior work identified several problem areas which led to specific
initiatives to address those problems: (a) instructor-chosen teams;
(b) early instruction and reflection on team skills; (c) feedback
on team performance; and (d) the use of an IDE that incorporates
an automated test-driven development tool. This paper describes the
implementation and assessment of these efforts. A significant increase
in student team skills from the middle of the semester to the end
of the semester was observed.","Developing collaborative skills early in the CS curriculum in a laboratory
environment",0
214,"Evaluating the impact of test-first programming and pair programming
through software process simulation
In this article, we present a simulation model that we developed for
exploring the influence of two key extreme programming (XP) practices
test-first programming and pair programming - on the evolution of
an XP software project. We present the results obtained simulating
a typical XP project changing the usage levels of the two practices.
We focused on output variables related to effort, size, quality and
released functionalities.","Evaluating the impact of test-first programming and pair programming
through software process simulation",0
215,"A replicated experiment of pair-programming in a 2nd-year software
development and design computer science course
This paper presents the results of a replicated pair programming experiment
conducted at the University of Auckland (NZ) during the first semester
of 2005. It involved 190 second year Computer Science students attending
a software design and construction course. We replicated the experiment
described by Mendes et al. (2005), investigating similar issues to
those reported Williams et al. (2003) and employing a subset of the
questionnaires used by Williams et al. Our results confirm the use
of pair programming as an effective programming/design learning technique.","A replicated experiment of pair-programming in a 2nd-year software
development and design computer science course",1
216,"Do programmer pairs make different mistakes than solo programmers?
Objective: Comparison of program defects caused by programmer pairs
and solo developers. Design: Analysis of programs developed during
two counter balanced experiments. Setting: Programming lab at University.
Experimental units: 42 programs developed by computer science students
participating in an extreme programming lab course. Main outcome
measures: Programmer pairs make as many algorithmic mistakes but
fewer expression mistakes than solo programmers. Results: The second
result is significant on the 5% level. Conclusions: For simple problems,
pair programming seems to lead to fewer mistakes than solo programming.",Do programmer pairs make different mistakes than solo programmers?,1
217,"A preliminary study on the impact of a pair design phase on pair
programming and solo programming
The drawback of pair programming is the nearly doubled personnel cost.
The extra cost of pair programming originates from the strict rule
of extreme programming where every line of code should be developed
by a pair of developers. Is this rule not a waste of resources? Is
it not possible to gain a large portion of the benefits of pair programming
by only a small fraction of the meeting time of a pair programming
session? We conducted a preliminary study to answer this question
by splitting the pair programming process into a pair design and
a pair implementation phase. The pair implementation phase is compared
to a solo implementation phase, which in turn was preceeded by a
pair design phase, as well. The study is preliminary as its major
goal was to identify an appropriate sample size for subsequent experiments.
The data from this study suggest that there is no difference in terms
of development cost between a pair and a solo implementation phase
if the cost for developing programs of similar level of correctness
is concerned. (c) 2006 Elsevier B.V. All rights reserved.","A preliminary study on the impact of a pair design phase on pair
programming and solo programming",1
218,"Interpreting procedures from descriptive guidelines
Errors in clinical practice guidelines may translate into errors in
real-world clinical practice. The best way to eliminate these errors
is to understand how they are generated, thus enabling the future
development of methods to catch errors made in creating the guideline
before publication. We examined the process by which a medical expert
from the American College of Physicians (ACP) created clinical algorithms
from narrative guidelines, as a case study. We studied this process
by looking at intermediate versions produced during the algorithm
creation. We identified and analyzed errors that were generated at
each stage, categorized them using Knuth's classification scheme,
and studied patterns of errors that were made over the set of algorithm
versions that were created. We then assessed possible explanations
for the sources of these errors and provided recommendations for
reducing the number of errors, based on cognitive theory and on experience
drawn from software engineering methodologies.",Interpreting procedures from descriptive guidelines,0
219,"An Empirical Comparison Between Pair Development and Software Inspection
in Thailand
Although pair programming and software inspection have the common
aim of minimizing the defects of the software product, each practice
has its strengths and weaknesses. We need to understand their costs
and benefits under given conditions to be able to select a practice
to execute in a development project. The objective of this study
is to compare the commonalities and differences between pair development
and software inspection as verification techniques in Thailand. One
classroom experiment and one industry experiment were conducted.
The development effort and effect of quality were investigated with
some additional

calendar time comparisons. The classroom results showed that average
development effort of the pair development group was 24% less than
inspection group with the improved product quality. The industry
experiment showed pair development to have about 4% more effort but
about 40% fewer major defects. In addition, the impacts of cultural
differences to the adoption of pair programming or software inspection
in Thailand are discussed.","An Empirical Comparison Between Pair Development and Software Inspection
in Thailand",1
220,"Using collaborative learning research to enhance pair programming
pedagogy
Programming is a pillar of IT education; teaching programming is a
major challenge of IT education. A significant amount of recent research
has demonstrated the success of pair programming pedagogy in meeting
this challenge. Pair programming is a key component of the Extreme
Programming software development methodology. When used as pedagogy,
pair programming is an instance of collaborative learning, a well-established
technique for teaching complex, conceptual tasks. Research has documented
the success of collaborative learning and has identified the critical
attributes of successful collaborative learning approaches. This
article uses a review of the research as a basis for recommended
enhancements to ensure that pair programming pedagogy possesses the
critical attributes of successful collaborative learning approaches.","Using collaborative learning research to enhance pair programming
pedagogy",0
221,"Adapting Pair Programming Pedagogy for use in Computer Literacy Courses
Pair programming is a key component of the Extreme Programming (XP)
software development methodology and involves two programmers working
at the same workstation to create code. Pair programming pedagogy,
based on this approach of sharing a workstation, has proven to be
successful in teaching programming to undergraduate students. The
tasks assigned to students in computer literacy courses differ significantly
from the task of developing a program: the former have students develop
predefined products using commercial applications by following step-by-step
instructions whereas the latter have students apply problem solving
skills to design and develop a unique solution. Because the types
of tasks differ, pair programming pedagogy must be adapted prior
to use in computer literacy courses. Pair programming

pedagogy is a recent and specific application of the older and more
general collaborative learning. Therefore, the critical attributes
of successful collaborative learning approaches are used to structure
this adaptation of pair programming pedagogy.",Adapting Pair Programming Pedagogy for use in Computer Literacy Courses,0
222,"Heterogeneous and homogenous pairs in pair programming: an empirical
analysis
Extreme programming (XP) is causing a lot of hype currently. Pair
programming is one of its practices, where two programmers work collaboratively
at one computer on the same design, algorithm, code, or test. The
purpose of this technique is to produce higher quality code in less
time. The collaborative working of two brains is better than one
as long as both are actively trying to accomplish the same goal.
It depends on many things, such as creativity, productivity and brainstorming
which are the essential factors of the programming activity. The
existence of these factors can vary in homogenous and heterogeneous
pairs, so the functional brainstorming capability of different pairs
during programming may vary in terms of quality, accuracy and speed.
This paper presents the empirical analysis between the homogenous
and heterogeneous pairs in terms of efficiency, accuracy, quality,
quantity of bugs, brainstorming performance and creativity potential
during programming activity.","Heterogeneous and homogenous pairs in pair programming: an empirical
analysis",1
223,"A non-invasive approach to product metrics collection
Software metrics are useful means in helping software engineers to
develop large and complex software systems. In the past years, many
software metrics have been proposed in order to represent several
different concepts such as complexity, coupling, inheritance, reuse,
etc. However, this requires the collection of large volumes of metrics
and, without flexible and transparent tools, is nearly impossible
to collect data accurately. This paper presents the design and the
implementation of a tool for collecting and analyzing product metrics
in a non-invasive way.",A non-invasive approach to product metrics collection,0
224,"Using Bayesian belief networks to model software project management
antipatterns
In spite of numerous traditional and agile software project management
models proposed, process and project modeling still remains an open
issue. This paper proposes a Bayesian network (BN) approach for modeling
software project management antipatterns. This approach provides
a framework for project managers, who would like to model the cause-effect
relationships that underlie an antipattern, taking into account the
inherent uncertainty of a software project. The approach is exemplified
through a specific BN model of an antipattern. The antipattern is
modeled using the empirical results of a controlled experiment on
extreme programming (XP) that investigated the impact of developer
personalities and temperaments on communication, collaboration-pair
viability and effectiveness in pair programming. The resulting BN
model provides the precise mathematical model of a project management
antipattern and can be used to measure and handle uncertainty in
mathematical terms.","Using Bayesian belief networks to model software project management
antipatterns",0
225,"Investigating the extreme programming system - an empirical study
In this paper we discuss our empirical study about the advantages
and difficulties 15 Greek software companies experienced applying
extreme programming (XP) as a holistic system in software development.
Based on a generic XP system including feedback influences and using
a cause-effect model including social-technical affecting factors,
as our research tool, the study statistically evaluates the application
of XP practices in the software companies being studied. Data were
collected from 30 managers and developers, using the sample survey
technique with questionnaires and interviews, in a time period of
six months. Practices were analysed individually, using descriptive
statistics (DS), and as a whole by building up different models using
stepwise discriminant analysis (DA). The results have shown that
companies, facing various problems with common code ownership, on-site
customer, 40-hour week and metaphor, prefer to develop their own
tailored XP method and way of working-practices that met their requirements.
Pair programming and test-driven development were found to be the
most significant success factors. Interactions and hidden dependencies
for the majority of the practices as well as communication and synergy
between skilled personnel were found to be other significant success
factors. The contribution of this preliminary research work is to
provide some evidence that may assist companies in evaluating whether
the XP system as a holistic framework would suit their current situation.",Investigating the extreme programming system - an empirical study,0
226,"Investigating the impact of personality types on communication and
collaboration-viability in pair programming - an empirical study
This paper presents two controlled experiments (a pilot and the main
one) investigating the impact of developer personalities and temperaments
on communication, collaboration-pair viability and ultimately effectiveness
in pair programming. The objective of the experiments was to compare
pairs of mixed/heterogeneous developer personalities and temperaments
with pairs of the same personalities and temperaments, in terms of
pair effectiveness. Pair effectiveness is expressed in terms of pair
performance, measured by communication, velocity, productivity and
customer satisfaction, and pair collaboration-viability measured
by developers' satisfaction, knowledge acquisition and participation
(collaboration satisfaction ratio, nuisance ratio, voluntary or mandatory
preference, and driver or navigator preference). The results have
shown that there is significant difference between the two groups,
indicating better communication and collaboration-viability for the
pairs with mixed personalities/temperaments.","Investigating the impact of personality types on communication and
collaboration-viability in pair programming - an empirical study",1
227,"Empirical validation of test-driven pair programming in game development
This paper investigates the effects of some extreme programming practices
in game development by conducting a case study with 12 students who
were assigned to implement a simple game application either as pairs
or as individuals. The pairs used some XP practices, such as pair
programming, test-driven and refactoring, while the individuals applied
the traditional waterfall-like approach. The results of the case
study showed that paired students completed their tasks faster and
with higher quality than individuals. The programs written by pairs
pass more test cases than those developed by individuals. Paired
programmers also wrote cleaner code with higher cohesion by creating
more reasonable number of methods. Therefore, some XP practices,
such as pair programming, test-driven and refactoring could be used
in game development.",Empirical validation of test-driven pair programming in game development,1
228,"Pair programming in software evolution
This paper presents an experiment on pair programming in software
evolution. Six graduate students are involved in the experiment,
in which four of them form two pairs and the rest two are required
to work individually. The experiment enables a study that compares
pair programming with traditional individual programming. The result
of experiment on six incremental change tasks shows that programmer
pairs not only work more efficiently than individual programmers,
they also write higher quality and clearer code. The result also
shows the discrepancy in change propagation, when programming pairs
miss only one and the individual programmers miss four out of eighteen.
Meanwhile, there is a significant decrease in the programming pairs'
use of time for last two change requests. Based on the experiment,
it may be concluded that programming pairs are a better solution
for urgent maintenance tasks than individual programmers.",Pair programming in software evolution,0
229,"Pair Programming and Agile Software Development: Experiences in a
College Setting
While agile software development methodologies are now becoming more
commonplace in industry, they have yet to be fully embraced by academic
institutions. To better prepare university students for the marketplace,
it is important that students are familiar with these alternative
software development methods. For those unacquainted with agile methodologies,
this paper first provides a summary of agile practices and a review
of reports on teaching these practices in college classrooms. Next
it discusses a study that the authors conducted in a graduate course
entitled Software Development Process Models, in which the students
were required to use eXtreme Programming practices. The discussion
describes course assignments and the results from a survey that was
administered to assess students’ perceptions of their experiences
using pair programming and agile methods.","Pair Programming and Agile Software Development: Experiences in a
College Setting",0
230,"Modelling software development across time zones
Economic factors and the World Wide Web are turning software usage
and its development into global activities. Many benefits accrue
from global development not least from the opportunity to reduce
time-to-market through `around the clock' working. This paper identified
some of the factors and constraints that influence time-to-market
when software is developed across time zones. It describes a model
of the relationships between development time and the factors and
overheads associated with such a pattern of work. The paper also
reports on a small-scale empirical study of software development
across time zones and presents some lessons learned and conclusions
drawn from the theoretical and empirical work carried out.",Modelling software development across time zones,0
231,"An open source simulation model of software development and testing
This paper describes a new discrete event simulation model built using
a mathematical tool (Matlab) to investigate the simulation of the
programming and the testing phases of a software development project.
In order to show how the model can be used and to provide some preliminary
concrete results, we give three examples of how this model can be
utilized to examine the effect of adopting different strategies for
coding and testing a new software system. Specifically, we provide
results of simulation runs intended to simulate the effects on the
coding and testing phases of different testing strategies, the adoption
of pair programming in an otherwise-unchanged process, and the automation
of testing.",An open source simulation model of software development and testing,0
232,"Debunking the nerd stereotype with pair programming
Our studies show that using pair programming as a structure for incorporating
collaboration in the classroom helps increase and broaden participation
in computing fields and helps debunk the myth that programmers work
alone all the time. It's also a way for students to get a better
view of and feel more confident in their preparation for working
in the real world. The face of the IT workforce is changing. As the
millennial generation makes its way into the working world, the archetype
of the nerd as the introverted, obsessed computer programmer must
share equal space with the chatty, social software engineer.",Debunking the nerd stereotype with pair programming,0
233,"Examining the Compatibility of Student Pair Programmers
Pair programming has been shown to be beneficial for both students
and teaching staff in university courses. A two-phased study of 1350
students was conducted at North Carolina State University from 2002-2005
to determine if teaching staff can proactively form compatible pairs
based upon any of the following factors: personality type, learning
style, skill level, programming self esteem, work ethic, or time
management preference. We examined compatibility among freshmen,
advanced undergraduate and graduate student pair programmers. We
have found that overall 93% of students are compatible with their
partners. Students notably preferred to pair with a partner that
he or she perceived to be of similar or higher skill level to them,
which can be predicted by grouping students with similar grade point
average. Additionally, pairs comprised of a sensor and an intuitor
learning style seem to be compatible, and pairs with differing work
ethic are generally not compatible.",Examining the Compatibility of Student Pair Programmers,1
234,"An empirical study on design quality improvement from best-practice
inspection and pair programming
The quality of the software design often has a major impact on the
quality of the final product and the effort for development and evolution.
A number of quality assurance (QA) approaches for inspection of early-life-cycle
documents have been empirically evaluated. An implicit assumption
of these studies was: an investment into early defect detection and
removal saves higher rework cost. The concept of pair programming
combines software construction with implicit QA in the development
team. For planning QA activities, an important research question
is how effective inspectors can be expected to be at detecting defects
in software (design and code) documents compared to programmers who
find defects as by-product of their usual construction activities.
In this paper we present an initial empirical study that compares
the defect detection effectiveness of a best-practice inspection
technique with defect detection as by-product of constructive software
evolution tasks during pair programming. Surprisingly, in the study
context pair programmers were more effective to find defects in design
documents than inspectors. However, when building a larger team for
defect detection, a mix of inspection and pair programming can be
expected to work better than any single technique.","An empirical study on design quality improvement from best-practice
inspection and pair programming",1
235,"Cognitive aspects of software engineering processes
Software engineering activities are to process a large amount of knowledge
and therefore, the cognitive process is mainly involved. Studying
the cognitive process involved in software engineering can greatly
help us to understand the whole process and to improve software engineering
research. In order to study the cognitive process, we developed an
empirical method that includes dialog-based protocol and self-directed
learning theory. The dialog-based protocol is based on the analysis
of the dialog that occurs between programmers in pair programming.
It is an alternative to the common think-aloud protocol and it may
minimize the Hawthorne and placebo effects. The self-directed learning
theory is based on the constructivist learning theory and the Bloom
taxonomy. It captures the specifics of the programmer's cognitive
activities and provides an encoding scheme used in analyzing the
empirical data. We conducted a case study of expert and intermediate
programmers during incremental software development. Compared to
intermediate programmers, experts discussed more domain concepts
at a greater length before starting to write code. Experts mostly
concentrated on one concept at one time, while intermediate programmers
often discussed several concepts simultaneously. Experts were willing
to reconsider and correct obsolete design decisions, while intermediate
programmers retained all design decisions. Experts had more absorption
activities at higher Bloom levels such as analysis and synthesis,
while intermediate programmers had more absorption activities at
lower Bloom levels such as comprehension and application. Experts
spent more time analyzing the knowledge and generating test cases,
while intermediate programmers spent more time learning the knowledge.
We also conducted a case study on program debugging, and found that
programmers apply the cognitive activities at all six Bloom levels
and move from lower one to upper one in order to make update. Program
debugging is a more complex activity than incremental software development.
A case study on pair programming in software evolution class projects
was also performed. The results of the case study showed that paired
students completed their change request tasks faster and with higher
quality than individuals. They also wrote less lines of code and
used more meaningful variable names.",Cognitive aspects of software engineering processes,0
236,"Implementing Virtual Pair Programming in E-Learning Environment
Programming subjects are one of the core and important subjects that
should be taken by students majoring in Information System or computing.
The problem of teaching and learning of programming has been widely
reported in literatures. Many attempts have been made to solve this
problems and this had led to many new approaches in teaching and
learning of programming. One of the approach that has been proposed
is the use of pair-programming, which is one of the practice of eXtreme
Programming (XP). The advent of e-learning has given birth of Virtual
Pair Programming (VPP). This paper describes how asynchronous mode
of collaboration using VPP could be implemented for e-learning learners
to learn programming.",Implementing Virtual Pair Programming in E-Learning Environment,0
237,"Evaluating pair programming with respect to system complexity and
programmer expertise
A total of 295 junior, intermediate, and senior professional Java
consultants (99 individuals and 98 pairs) from 29 international consultancy
companies in Norway, Sweden, and the UK were hired for one day to
participate in a controlled experiment on pair programming. The subjects
used professional Java tools to perform several change tasks on two
alternative Java systems with different degrees of complexity. The
results of this experiment do not support the hypotheses that pair
programming in general reduces the time required to solve the tasks
correctly or increases the proportion of correct solutions. On the
other hand, there is a significant 84 percent increase in effort
to perform the tasks correctly. However, on the more complex system,
the pair programmers had a 48 percent increase in the proportion
of correct solutions but no significant differences in the time taken
to solve the tasks correctly. For the simpler system, there was a
20 percent decrease in time taken but no significant differences
in correctness. However, the moderating effect of system complexity
depends on the programmer expertise of the subjects. The observed
benefits of pair programming in terms of correctness on the complex
system apply mainly to juniors, whereas the reductions in duration
to perform the tasks correctly on the simple system apply mainly
to intermediates and seniors. It is possible that the benefits of
pair programming will exceed the results obtained in this experiment
for larger, more complex tasks and if the pair programmers have a
chance to work together over a longer period of time.","Evaluating pair programming with respect to system complexity and
programmer expertise",0
238,"Collaborative programming projects in an advanced CS course
There is ongoing discussion regarding the benefits of collaborative
programming in software development. This paper presents the results
of a collaborative programming research conducted at the Open University
of Israel which is a distance learning institution. The research
was conducted during the academic year of 2005 in the course ""Advanced
Programming in Java Workshop"", given in the Computer Science Department.
The workshop is based primarily on J2EE technologies and requires
the students to hand in a final project. We investigated the collaborative
programming work in the workshop. Our results support the use of
collaborative programming as an effective programming technique.",Collaborative programming projects in an advanced CS course,0
239,"Pair Programming in Software Development Teams An Empirical Study
of its Benefits
We present the results of an extensive and substantial case study
on pair programming, which was carried out in courses for software
development at the University of Dortmund, Germany. 13 software development
teams with about 100 students took part in the experiment. The groups
were divided into two sets with different working conditions. In
one set, the group members worked on their projects in pairs. Even
though the paired teams could only use half of the workstations the
teams of individual workers could use, the paired teams produced
nearly as much code as the teams of individual workers at the same
time. In addition, the code produced by the paired teams was easier
to read and to understand. This facilitates finding errors and maintenance.","Pair Programming in Software Development Teams An Empirical Study
of its Benefits",1
240,"Pair programming and the mysterious role of the navigator
Computer programming is generally understood to be highly challenging
and since its inception a wide range of approaches, tools and methodologies
have been developed to assist in managing its complexity. Relatively
recently the potential benefits of collaborative software development
have been formalised in the practice of pair programming. Here we
attempt to `unpick' the pair programming process through the analysis
of verbalisations from a number of commercial studies. We focus particularly
on the roles of the two programmers and what their key characteristics
and behaviours might be. In particular, we dispute two existing claims:
(i) that the programmer who is not currently typing in code (""the
navigator"") is constantly reviewing what is typed and highlighting
any errors (i.e. acting as a reviewer) and (ii) that the navigator
focuses on a different level of abstraction as a way of ensuring
coverage at all necessary levels (i.e. acting as a foreman). We provide
an alternative model for these roles (""the tag team"") in which the
driver and navigator play much more equal roles. We also suggest
that a key factor in the success of pair programming may be the associated
increase in talk at an intermediate level of abstraction.",Pair programming and the mysterious role of the navigator,0
241,"Evaluating performances of pair designing in industry
Pair programming has attracted an increasing interest from practitioners
and researchers: there is initial empirical evidence that it has
positive effects on quality and overall delivery time, as demonstrated
by several controlled experiments. The practice does not only regard
coding, since it can be applied to any other phase of the software
process: analysis, design, and testing. Because of the asymmetry
between design and coding, applying pair programming to the design
phase might not produce the same benefits as those it produces in
the development phase. In this paper, we report the findings of a
controlled experiment on pair programming, applied to the design
phase and performed in a software company. The results of the experiment
suggest that pair programming slows down the task, yet improves quality.
Furthermore we compare our results with those of a previous exploratory
experiment involving students, and we demonstrate how the outcomes
exhibit very similar trends.",Evaluating performances of pair designing in industry,0
242,"Evaluating performances of pair designing in industry
Pair programming has attracted an increasing interest from practitioners
and researchers: there is initial empirical evidence that it has
positive effects on quality and overall delivery time, as demonstrated
by several controlled experiments. The practice does not only regard
coding, since it can be applied to any other phase of the software
process: analysis, design, and testing. Because of the asymmetry
between design and coding, applying pair programming to the design
phase might not produce the same benefits as those it produces in
the development phase. In this paper, we report the findings of a
controlled experiment on pair programming, applied to the design
phase and performed in a software company. The results of the experiment
suggest that pair programming slows down the task, yet improves quality.
Furthermore we compare our results with those of a previous exploratory
experiment involving students, and we demonstrate how the outcomes
exhibit very similar trends.",Evaluating performances of pair designing in industry,0
243,"Increased Retention of Early Computer Science and Software Engineering
Students Using Pair Programming
An important problem faced by many Computer Science and Software Engineering
programs is declining enrollment. In an effort to reverse that trend
at Mississippi State University, we have instituted pair programming
for the laboratory exercises in the introductory programming course.
This paper describes a study performed to analyze whether using pair
programming would increase retention. An important goal of this study
was not only to measure increased retention, but to provide insight
into why retention increased or decreased. The results of the study
showed that retention significantly increased for those students
already majoring in Computer Science, Software Engineering, or Computer
Engineering. In addition, survey results indicated that the students
viewed many aspects of pair programming to be very beneficial to
their learning experience.","Increased Retention of Early Computer Science and Software Engineering
Students Using Pair Programming",1
244,"The Social Dynamics of Pair Programming
This paper presents data from a four month ethnographic study of professional
pair programmers from two software development teams. Contrary to
the current conception of pair programmers, the pairs in this study
did not hew to the separate roles of ""driver"" and ""navigator"". Instead,
the observed programmers moved together through different phases
of the task, considering and discussing issues at the same strategic
""range"" or level of abstraction and in largely the same role. This
form of interaction was reinforced by frequent switches in keyboard
control during pairing and the use of dual keyboards. The distribution
of expertise among the members of a pair had a strong influence on
the tenor of pair programming interaction. Keyboard control had a
consistent secondary effect on decision-making within the pair. These
findings have implications for software development managers and
practitioners as well as for the design of software development tools.",The Social Dynamics of Pair Programming,0
245,"A Non-invasive Method for the Conformance Assessment of Pair Programming
Practices Based on Hierarchical Hidden Markov Models
We specify a non-invasive method allowing to estimate the time each
developer of a pair spends over the development activity, during
Pair Programming. The method works by performing first a behavioural
fingerprinting of each developer – based on low level event logs
– which then is used to operate a segmentation over the log sequence
produced by the pair: in a timelined log event sequence this is equivalent
to estimating the times of the switching between developers. We model
the individual developer’s behaviour by means of a Markov Chain –
inferred from the logs – and model the developers’ role-switching
process by a further, higher level, Markov Chain. The overall model
consisting in the two nested Markov Chains belongs to the class of
Hierarchical Hidden Markov Models. The method could be used not only
to assess the degree of conformance with respect to predefined Pair
Programming switch-times policies, but also to capture the characteristics
of a given programmers pair’s switching process, namely in the context
of Pair Programming effectiveness studies.","A Non-invasive Method for the Conformance Assessment of Pair Programming
Practices Based on Hierarchical Hidden Markov Models",0
246,"Controlled experimentation on adaptations of pair programming
The use of agile methods is growing in industrial practice due to
the documented benefits of increased software quality, shared programmer
expertise, and user satisfaction. These methods include pair programming
(two programmers working side-by-side producing the code) and test-driven
approaches (test cases written first to prepare for coding). In practice,
software development organizations adapt agile methods to their environment.
The purpose of this research is to understand better the impacts
of adapting these methods. We perform a set of controlled experiments
to investigate how adaptations, or variations, to the pair programming
method impact programming performance and user satisfaction. We find
that method variations do influence programming results. In particular,
better performance and satisfaction outcomes are achieved when the
pair programming is performed in face-to-face versus virtual settings,
in combination with the test-driven approach, and with more experienced
programmers. We also find that limiting the extent of collaboration
can be effective, especially when programmers are more experienced.
These experimental results provide a rigorous foundation for deciding
how to adapt pair programming methods into specific project contexts.",Controlled experimentation on adaptations of pair programming,0
247,"Controlled experimentation on adaptations of pair programming
The use of agile methods is growing in industrial practice due to
the documented benefits of increased software quality, shared programmer
expertise, and user satisfaction. These methods include pair programming
(two programmers working side-by-side producing the code) and test-driven
approaches (test cases written first to prepare for coding). In practice,
software development organizations adapt agile methods to their environment.
The purpose of this research is to understand better the impacts
of adapting these methods. We perform a set of controlled experiments
to investigate how adaptations, or variations, to the pair programming
method impact programming performance and user satisfaction. We find
that method variations do influence programming results. In particular,
better performance and satisfaction outcomes are achieved when the
pair programming is performed in face-to-face versus virtual settings,
in combination with the test-driven approach, and with more experienced
programmers. We also find that limiting the extent of collaboration
can be effective, especially when programmers are more experienced.
These experimental results provide a rigorous foundation for deciding
how to adapt pair programming methods into specific project contexts.",Controlled experimentation on adaptations of pair programming,1
248,"Managing programmed instruction and collaborative peer tutoring in
the classroom: Applications in teaching Java(TM)
To fulfill part of the course requirements, 34 undergraduate students
in two courses completed an online programmed instruction tutor as
the first technical training exercise in a Java(TM) programming course
designed for information systems majors. The tutor taught a simple
JApplet program to display a text string within a browser window
on the Web. Students in the first course next participated in a collaborative
peer tutoring session, based on the JApplet program, followed by
a lecture on the program and by successfully running the program
on the Web. For the second course, the peer tutoring session was
scheduled after the lecture and after successfully running the program.
Students in both courses completed tests of far transfer (""meaningful
learning"") and software self-efficacy before using the tutor and
on several subsequent occasions following that initial learning.
Students in the second course also completed a 4-item scale to assess
the development of classification and functionality knowledge regarding
elements of the program. Students in both courses showed progressive
improvement in all performance measures across the several assessment
occasions. Students' positive ratings of the effectiveness of both
the tutor and the collaborative peer tutoring supported the value
of these learning experiences in a technical knowledge domain. The
results of this study, based on student performance observed within
the context of the classroom, show the importance of providing a
range of synergistic learning experiences that culminate in a level
of skill and confidence that prepares and motivates all students
for advanced instruction in Java. They also show how to manage the
instructional techniques in the classroom to accomplish that educational
outcome.","Managing programmed instruction and collaborative peer tutoring in
the classroom: Applications in teaching Java(TM)",0
249,"Reflections on 10 years of sponsored senior design projects: Students
win-clients win!
Undergraduate computer science degree programs often provide an opportunity
for students to experience real software projects as a part of their
programs of study. These experiences frequently reside in a course
in which students form software development teams, are assigned to
a project offered by a corporate sponsor and devote one or two semesters
to the task of making progress on the project. In an ideal model,
faculty mentor student teams who, in turn, behave as subcontractors
or consultants to the sponsor. Students work for a grade, not directly
for the sponsor as a true subcontractor would. In the ideal model,
students demonstrate what they have learned about software engineering
process, as well as their ability to implement programmed solutions.
Student teams provide progress reports, both oral and written, and
directly experience many of the challenges and successes of true
software engineering professionals. This paper reports on one such
program after 10 years of operation. The technologies and software
development processes of student projects are summarized and presented
as an informal survey. Student response is discussed in terms of
software systems they produced and how they went about producing
them. The maturation of these students as software engineering professionals
is also discussed.","Reflections on 10 years of sponsored senior design projects: Students
win-clients win!",0
250,"Pair programming unearthed
Extreme Programming (XP) is an emerging development methodology. To
get a better understanding of XP, the practices which constitute
this process need to be critically analyzed. In particular, the practice
of pair programming is analyzed as it is both an interesting practice
and one that provides a large area of research. The goal of this
thesis, therefore, is to analyze pair programming in an effort to
determine how this practice relates to solo (traditional) programming,
the personality characteristics of the developers and the XP practice
of refactoring. By undertaking a thorough examination of pair programming,
a deeper understanding of this important XP practice can be gained
and a deeper understanding of XP can also be gained. To accomplish
this goal, two experiments were designed and implemented using fourth
year computer science students at the University of Manitoba. The
first experiment compared solo programming with pair programming
while using personality characteristics, as determined by Eysenck
Personality Questionnaire (EPQ-R), as factors. The second experiment
compared solo programming and pair programming in terms of what kind
of refactorings the subjects carried out while working individually
as opposed to in pairs.re (EPQ-R), as factors. The second experiment
compared solo programming and pair programming in terms of what kind
of refactorings the subjects carried out while working individually
as opposed to in pairs. These experiments were designed in an attempt
to confirm or deny five hypotheses. These hypotheses are as follows:
(1) H1: (H1null) Pair programmers are not more efficient at software
development than solo programmers. (H1a) Pair programmers are more
efficient at software development than solo programmers. (2) H2:
(H2null) Personality characteristics play no role in how efficiently
an individual develops code when working in a pair programming situation.
(H2a) Personality characteristics do play a role in how efficiently
an individual develops code when working in a pair programming situation.
(3) H3: (H3null) The individual efficiency of each partner in a pairing
has no effect on how well the two individuals pair program. (H3a)
Pair programming efficiency can be seen as a function of the solo
programming efficiency of each of the individuals in the pairing.
(4) H4: (H4null) Individuals and pairs undertake refactorings at
the same difficulty level. (H4a) Pair programmers undertake refactorings
at higher difficulty levels than individuals. (5) H5: (H5null) Pair
programming satisfaction is unrelated to the personality characteristics
and software development skill levels of the developers. (H5a) Pair
programming satisfaction is linked to the personality characteristics
of developers and their software development skill level. The findings
were such that the null hypothesis was demonstrated for H1 and H2,
although some interesting statistics were still recorded. In particular,
it is thought that with a larger sample size, the alternate H2 could
be shown to be true. H1 yielded data which could suggest that pairs
develop higher quality code while individuals develop code more quickly.
In both cases, however, no statistically significant correlations
were found. For H3 and H5, the alternate hypotheses were adopted.
In the case of H3, the higher the individual ability of the subjects,
the higher the pair programming efficiency. For H5, it was clear
that the more extroverted an individual tends to be, the more satisfied
that individual tends to be with the pair programming experience.
The data for H3 was a little harder to analyze. While there was no
statistical difference in the difficulty levels of refactorings individuals
chose as opposed to pairs, there was a negative correlation in that
a subject who undertook difficult refactorings individually would
undertake less difficult refactorings when paired and vice versa.
In general, I believe this thesis was successful in broadening and
deepening our understanding of the pair programming practice as the
experiments yielded a l rge amount of interesting data in how the
practice of pair programming relates to solo programming, personality
characteristics, and refactoring.",Pair programming unearthed,1
251,"Problems encountered by novice pair programmers
In a study of the types of problems encountered by students that led
them to seek assistance, Robins et al. [2006] found that the most
common problems were related to trivial mechanics. The students in
this study worked by themselves on their programming exercises. This
article discusses a replication of the Robins et al. study in which
the subjects pair programmed. The types of problems encountered by
the pairing students were similar to those of the solo students.
The number of problems requiring assistance was much smaller for
the pairing students, which suggests that they were able to resolve
more problems on their own.",Problems encountered by novice pair programmers,1
252,"Evaluating the Usefulness of Pair Programming in a Classroom Setting
Pair programming, the practice of two programmers working side by
side on the same task on one computer, is a practice that is becoming
increasingly prevalent in the computer science industry. Although
there has been a large amount of research investigating pair programming
in an industry setting, there has been little work done with pair
programming in a classroom setting. Furthermore, the studies that
have been done have concentrated on programming students with ample
programming experience in a variety of languages. In addition to
this, industry studies have focused in on the amount of work being
completed rather than what is learned by the programmers. Therefore,
this work will concentrate on students with considerably less programming
experience, and focus on whether they learn better while working
in teams. In addition, we will investigate how the difference in
programming skill contributes to the amount learned. To do so, we
have observed and interviewed students participating in pair programming
to determine whether they are able to learn more and enjoy their
work more when working in pairs. Finally, we participated in pair
programming in a variety of settings to test it first hand. We found
that despite some drawbacks, pair programming can be extremely beneficial.
When used correctly, pair programming can be a valuable asset to
the computer science classroom.",Evaluating the Usefulness of Pair Programming in a Classroom Setting,1
253,"Experiences of Using Pair Programming in an Agile Project
The interest in pair programming (PP) has increased recently, e.g.
by the popularization of agile software development. However, many
practicalities of PP are poorly understood. We present experiences
of using PP extensively in an industrial project. The fact that the
team had a limited number of high-end workstations forced it in a
positive way to quick deployment and rigorous use of PP. The developers
liked PP and learned it easily. Initially, the pairs were not rotated
frequently but adopting daily, random rotation improved the situation.
Frequent rotation seemed to improve knowledge transfer. The driver/navigator
roles were switched seldom, but still the partners communicated actively.
The navigator rarely spotted defects during coding, but the released
code contained almost no defects. Test-driven development and design
in pairs possibly decreased defects. The developers considered that
PP improved quality and knowledge transfer, and was better suited
for complex tasks than for easy tasks.",Experiences of Using Pair Programming in an Agile Project,0
254,"Requirements engineering challenges in market-driven software development
- An interview study with practitioners
Requirements engineering for market-driven software development entails
special challenges. This paper presents results from an empirical
study that investigates these challenges, taking a qualitative approach
using interviews with fourteen employees at eight software companies
and a focus group meeting with practitioners. The objective of the
study is to increase the understanding of the area of market-driven
requirements engineering and provide suggestions for future research
by describing encountered challenges. A number of challenging issues
were found, including bridging communication gaps between marketing
and development, selecting the right level of process support, basing
the release plan on uncertain estimates, and managing the constant
flow of requirements.","Requirements engineering challenges in market-driven software development
- An interview study with practitioners",0
255,"Inspecting Automated Test Code: A Preliminary Study
Testing is an essential part of an agile process as test is automated
and tends to take the role of specifications in place of documents.
However, whenever test cases are faulty, developers’ time might be
wasted to fix problems that do not actually originate in the production
code. Because of their relevance in agile processes, we posit that
the quality of test cases can be assured through software inspections
as a complement to the informal review activity which occurs in pair
programming. Inspections can thus help the identification of what
might be wrong in test code and where refactoring is needed. In this
paper, we report on a preliminary empirical study where we examine
the effect of conducting software inspections on automated test code.
First results show that software inspections can improve the quality
of test code, especially the repeatability attribute. The benefit
of software inspections also apply when automated unit tests are
created by developers working in pair programming mode.",Inspecting Automated Test Code: A Preliminary Study,0
256,"On the Effects of Pair Programming on Thoroughness and Fault-Finding
Effectiveness of Unit Tests
Code coverage and mutation score measure how thoroughly tests exercise
programs and how effective they are, respectively. The objective
is to provide empirical evidence on the impact of pair programming
on both, thoroughness and effectiveness of test suites, as pair programming
is considered one of the practices that can make testing more rigorous,
thorough and effective. A large experiment with MSc students working
solo and in pairs was conducted. The subjects were asked to write
unit tests using JUnit, and to follow test-driven development approach,
as suggested by eXtreme Programming methodology. It appeared that
branch coverage, as well as mutation score indicator (the lower bound
on mutation score), was not significantly affected by using pair
programming, instead of solo programming. However, slight but insignificant
positive impact of pair programming on mutations score indicator
was noticeable. The results do not support the positive impact of
pair programming on testing to make it more effective and thorough.
The generalization of the results is limited due to the fact that
MSc students participated in the study. It is possible that the benefits
of pair programming will exceed the results obtained in this experiment
for larger, more complex and longer projects.","On the Effects of Pair Programming on Thoroughness and Fault-Finding
Effectiveness of Unit Tests",1
257,"Are groups working in the Information Technology class?
We discuss teachers' perception of the use of group work in the Information
Technology (IT) classroom. We describe the current situation regarding
the implementation of group work in IT classrooms in South Africa
as well as the challenges that IT teachers face when implementing
group work. This information will be used in further research to
develop a training model for teachers and student teachers, which
should enable them to apply group work effectively in the IT classroom.",Are groups working in the Information Technology class?,0
258,"An evaluation of the degree of agility in six agile methods and its
applicability for method engineering
While agile methods are in use in industry, little research has been
undertaken into what is meant by agility and how a supposed agile
method can be evaluated with regard to its veracity to belong to
this category of software development methodological approaches.
Here, an analytical framework, called 4-DAT, is developed and applied
to six well-known agile methods and, for comparison, two traditional
methods. The results indicate the degree of agility to be found in
each method, from which a judgement can be made as to whether the
appellation of ""agile"" to that method is appropriate. This information
is shown to be useful, for example, when constructing a methodology
from method fragments (method engineering) and when comparing agile
and traditional methods.","An evaluation of the degree of agility in six agile methods and its
applicability for method engineering",0
259,"Ethnographically-informed empirical studies of software practice
Over the past decade we have performed a sustained series of qualitative
studies of software development practice, focusing on social factors.
Using an ethnographically-informed approach, we have addressed four
areas of software practice: software quality management systems,
the emergence of object technology, professional end user development
and agile development. Several issues have arisen from this experience,
including the nature of research questions that such studies can
address, the advantages and challenges associated with being a member
of the community under study, and how to maintain rigour in data
collection. In this paper, we will draw on our studies to illustrate
our approach and to discuss these and other issues.",Ethnographically-informed empirical studies of software practice,0
260,"First year students' impressions of pair programming in CS1
Pair programming, as part of the Agile Development process, has noted
benefits in professional software development scenarios. These successes
have led to a rise in use of pair programming in educational settings,
particularly in Computer Science 1 (CS1). Specifically, McDowell
et al. [2006] has shown that students using pair programming in CS1
do better in a CS2 class (with solo programming) than students who
don't pair in CS1. This paper seeks to address a similar question,
but from a qualitative, student-focused approach. How do students
define, experience, and value the pair programming experience? How
do they experience and value it compared to solo programming? Does
pairing in CS1 impact their confidence in their abilities? We report
on semi-structured interviews with 11 subjects from two institutions
where pair programming was used in CS1, and solo programming was
used in the CS2. Many of the responses met our expectations; students
get stuck less and explore more ideas while pairing, and believe
that pair programming helped them in CS1. Other responses were more
surprising. Students reported that when solo programming they were
more confident and understood their programs better. Many students
also said that they started work on their assignments earlier when
soloing. Students also continue to use other students as resources
even when working solo.",First year students' impressions of pair programming in CS1,1
261,"Experiences of using pair programming in an agile project
The interest in pair programming (PP) has increased recently, e.g.
by the popularization of agile software development. However, many
practicalities of PP are poorly understood. We present experiences
of using PP extensively in an industrial project. The fact that the
team had a limited number of high-end workstations forced it in a
positive way to quick deployment and rigorous use of PP. The developers
liked PP and learned it easily. Initially, the pairs were not rotated
frequently but adopting daily, random rotation improved the situation.
Frequent rotation seemed to improve knowledge transfer. The driver/navigator
roles were switched seldom, but still the partners communicated actively.
The navigator rarely spotted defects during coding, but the released
code contained almost no defects. Test-driven development and design
in pairs possibly decreased defects. The developers considered that
PP improved quality and knowledge transfer, and was better suited
for complex tasks than for easy tasks.",Experiences of using pair programming in an agile project,0
262,"Pair formation in CS1: Self-selection vs random pairing
Attrition in Computer Science education is at its highest level in
the last 20 years. Many researchers are searching for practices to
decrease the attrition rate nationwide. Pair programming has been
borrowed from industry and placed in today's computer science academic
environment. Many studies have shown that pair programming increases
students' confidence levels and aids in the retention of those students
that have selected computer science as their academic major. This
research builds on this premise and investigates the effects of self-selection
and random methods of pair formation. These methods of pair formation
were used in beginning computer science courses at a historically
black college and university (HBCU) to statistically demonstrate
that students prefer to self-select their partner. Honoring this
preference aids in the students overall satisfaction with beginning
CS courses therefore decreasing the students possibility of changing
their academic major. Data will show that in a CS1 course, the election
to implement random or self-selection pair formation is trivial and
students will perform equally whether the pairs are assigned or self-selected,
however self-selection aids in the satisfaction of a student and
therefore impacts their decision to retain computer science as their
major.",Pair formation in CS1: Self-selection vs random pairing,1
263,"On the Impact of a Collaborative Pedagogy on African American Millennial
Students in Software Engineering
Millennial students (those born after 1982), particularly African
Americans and women, have demonstrated a propensity toward collaborative
activities. We conducted a collective case study at North Carolina
State University and North Carolina A&T to ascertain the role of
collaboration and social interaction in attracting and retaining
students in information technology. Responses from semi-structured
interviews with 11 representative African American students in these
classes were coded and analyzed. The responses from these minority
students were used to evolve a social interaction model. The conjectures
generated from the model suggest that pair programming and agile
software methodologies effectively create a collaborative environment
that is desirable to Millennial students, male and female, and, with
the new evidence, minority and majority. Additionally, the African
American Millennial students enjoy learning from their peers and
believe that a collaborative environment better prepares them for
the ""real world.""","On the Impact of a Collaborative Pedagogy on African American Millennial
Students in Software Engineering",1
